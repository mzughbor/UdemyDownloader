1
00:00:07,440 --> 00:00:13,470
All right, so right now I'm looking at a function called Register Sidebar, as usual, check out the

2
00:00:13,470 --> 00:00:15,930
resource section of this lecture for the link.

3
00:00:16,500 --> 00:00:21,810
This function will tell WordPress that we have sidebars we'd like WordPress to be aware of.

4
00:00:22,200 --> 00:00:27,180
By doing this, we allow users to customize the sidebar by adding various widgets.

5
00:00:27,480 --> 00:00:33,210
If you look at the very short description, WordPress recommends that we use this function in the widgets

6
00:00:33,210 --> 00:00:34,490
init action hook.

7
00:00:34,740 --> 00:00:38,380
So let's do that inside the functions file.

8
00:00:38,490 --> 00:00:43,680
Let's add this hook under the hooks section and let's call the function Jiyu widgets.

9
00:00:46,240 --> 00:00:53,350
Next, let's create a file inside the includes folder called Widget Stop and define the function.

10
00:00:56,860 --> 00:00:59,620
Lastly, include it from the functions file.

11
00:01:02,850 --> 00:01:06,160
Now we can create widget areas for our theme.

12
00:01:06,600 --> 00:01:10,690
Let's take a look at the documentation for the register, a sidebar function.

13
00:01:11,370 --> 00:01:13,740
There's only one parameter and it's optional.

14
00:01:13,980 --> 00:01:15,610
This function accepts an array.

15
00:01:16,080 --> 00:01:19,270
Let's go through this one by one inside the widgets file.

16
00:01:19,680 --> 00:01:22,590
So let's call this function and pass it in array.

17
00:01:27,800 --> 00:01:33,280
The first key is the name of the sidebar, the name should be readable, short and concise.

18
00:01:33,590 --> 00:01:39,500
I'll be using the double underscore function just like last time, since I want to allow users to translate

19
00:01:39,500 --> 00:01:40,580
this name if needed.

20
00:01:41,060 --> 00:01:43,880
I'm going to call it my first theme sidebar.

21
00:01:46,090 --> 00:01:53,830
The second key we can set is the ID we must set an ID or WordPress will throw an error before we set

22
00:01:53,830 --> 00:01:59,440
the ID, let's go to the codecs for a second, scroll down to the notes, and I want you to look at

23
00:01:59,440 --> 00:02:00,460
the very first note.

24
00:02:01,180 --> 00:02:06,830
WordPress warns us of IDs we should avoid and provide a link of IDs not to use.

25
00:02:07,210 --> 00:02:08,770
So let's take a quick look.

26
00:02:08,900 --> 00:02:11,480
As you can see, the list is pretty exhaustive.

27
00:02:11,830 --> 00:02:15,640
Let's go back to our widget file and let's give our widget a unique ID.

28
00:02:16,180 --> 00:02:22,870
One way of making sure we have a unique ID is the prefix our ID with initials like we do with our functions.

29
00:02:23,530 --> 00:02:26,860
I'm going to give my sidebar, the ID Jiyu sidebar.

30
00:02:29,210 --> 00:02:35,930
Next is a simple description, I'm going to make this translatable and set it to sidebar for the theme

31
00:02:35,930 --> 00:02:36,440
Udemy.

32
00:02:41,550 --> 00:02:47,880
I'm going to skip the Klasky as I don't want to apply any classes, there are a couple more things we

33
00:02:47,880 --> 00:02:51,340
should be doing, but I just want to make sure our widgets are working.

34
00:02:51,750 --> 00:02:53,580
Go ahead and refresh the page.

35
00:02:55,890 --> 00:02:58,110
We should see no errors so far.

36
00:02:58,470 --> 00:03:04,230
Let's go to the WordPress dashboard and you should now see a new menu item here under appearance called

37
00:03:04,230 --> 00:03:04,740
Widgets.

38
00:03:05,190 --> 00:03:06,660
Let's check this out quickly.

39
00:03:07,180 --> 00:03:12,490
As you can see, WordPress now has created a nice little UI for our sidebar.

40
00:03:12,870 --> 00:03:15,680
It takes care of saving and updating the sidebar.

41
00:03:16,080 --> 00:03:18,200
Right now, our sidebar is empty.

42
00:03:18,210 --> 00:03:21,180
So let's drag and drop some widgets onto the sidebar.

43
00:03:25,750 --> 00:03:28,250
After doing so, let's take a look at our site.

44
00:03:28,570 --> 00:03:30,830
You'll notice that our widgets aren't loading.

45
00:03:31,180 --> 00:03:33,920
This is because we've only registered the sidebar.

46
00:03:34,270 --> 00:03:36,430
The next step is to display the sidebar.

47
00:03:37,000 --> 00:03:40,780
Before we do that, let's separate our sidebar from our template.

48
00:03:41,230 --> 00:03:46,870
Just like the header and footer, sidebars can be put into their own files and can be called with the

49
00:03:46,870 --> 00:03:47,410
function.

50
00:03:47,410 --> 00:03:48,420
Get sidebar.

51
00:03:48,850 --> 00:03:51,630
The rules for names apply to this function as well.

52
00:03:52,360 --> 00:03:55,350
Create a file called Sidebar FTP.

53
00:03:57,540 --> 00:04:04,110
Next, let's completely cut the GML for the sidebar from our template into the sidebar file, you can

54
00:04:04,110 --> 00:04:07,830
find this by looking for the div tag with the class sidebar.

55
00:04:08,260 --> 00:04:12,480
It'll also be surrounded by these HTML comments that say sidebar.

56
00:04:14,710 --> 00:04:19,870
Once you've pasted that, go back to the index template and call the get sidebar function.

57
00:04:22,160 --> 00:04:28,700
Let's go back to the sidebar template, I'm going to actually delete a lot of the HTML inside the div

58
00:04:28,700 --> 00:04:32,870
tag and leave it empty like so since the sidebar is going to be dynamic.

59
00:04:35,070 --> 00:04:42,390
Inside the sidebar file, we have to check if the sidebar is active inside an if statement, let's call

60
00:04:42,390 --> 00:04:44,550
the is active sidebar function.

61
00:04:49,720 --> 00:04:55,960
This function does exactly what we need it to do, it will check if the sidebar is active, you simply

62
00:04:55,960 --> 00:04:57,630
pass in the name of the sidebar.

63
00:04:57,970 --> 00:05:04,870
In our case, this would be the idea of the sidebar we created, which was just sidebar inside this

64
00:05:04,870 --> 00:05:05,830
conditional statement.

65
00:05:05,830 --> 00:05:11,890
If it returns true, then we'll call a function called Dynamic Sidebar, which will take care of displaying

66
00:05:11,890 --> 00:05:12,580
our sidebar.

67
00:05:14,830 --> 00:05:21,700
The only thing we have to pass it is the idea of the sidebar, which is Jiyu underscore sidebar, any

68
00:05:21,700 --> 00:05:24,760
widgets that are attached to the sidebar will now be displayed.

69
00:05:25,180 --> 00:05:29,620
If we did everything right, we should now see our new sidebar appear on the page.

70
00:05:30,340 --> 00:05:30,760
Great.

71
00:05:31,180 --> 00:05:35,970
Well, not so great because the HTML output, it doesn't really go well with our theme.

72
00:05:36,430 --> 00:05:37,360
Let's fix this.

73
00:05:38,080 --> 00:05:42,450
Let's take a look at the Codex and learn more about the register sidebar function.

74
00:05:42,910 --> 00:05:44,890
There are four more keys we can set.

75
00:05:45,130 --> 00:05:50,230
They are the before widget after widget, before title and after title keys.

76
00:05:50,650 --> 00:05:56,250
These keys allow us to inject HTML into the same parts as each name states.

77
00:05:56,260 --> 00:05:59,820
It'll insert HTML at some point of each which it created.

78
00:06:00,550 --> 00:06:03,760
I'm going to pause the video for a bit and fill out these keys.

79
00:06:05,270 --> 00:06:11,460
All right, now I want you to copy what I have for the most part, nothing in here is really special.

80
00:06:11,750 --> 00:06:16,190
This is just regular HTML with some classes to make our widgets look pretty.

81
00:06:16,640 --> 00:06:22,730
It can look a bit confusing because there are so many opening and closing tax widgets areas are a bit

82
00:06:22,730 --> 00:06:27,310
tricky to create if you create widget areas with so many classes and tax.

83
00:06:27,680 --> 00:06:32,690
So when you're designing your site, try and keep the HTML for widgets fairly minimal.

84
00:06:33,080 --> 00:06:35,960
I was able to create this through trial and error.

85
00:06:36,800 --> 00:06:40,320
The only thing I want you to focus on is the before widget key.

86
00:06:40,790 --> 00:06:46,640
You'll notice that I have these random set of characters in the class and IDE attributes.

87
00:06:47,000 --> 00:06:52,040
These attributes are a bit special because this tag is the container tag for the whole widget.

88
00:06:52,700 --> 00:06:55,860
You can think of these random characters as placeholders.

89
00:06:56,210 --> 00:07:01,190
There are some widgets out there that might want to add their own classes and set their own ideas.

90
00:07:01,700 --> 00:07:05,960
By providing these characters, we allow for a third party widgets to do so.

91
00:07:06,260 --> 00:07:08,040
We don't have to do anything else.

92
00:07:08,760 --> 00:07:12,500
Now let's refresh the homepage and see what our widgets look like.

93
00:07:12,500 --> 00:07:16,520
Now, if yours looks anything like mine, then you're on the right track.

94
00:07:17,150 --> 00:07:22,310
It's definitely looking closer to the original template, but we still need to make changes.

95
00:07:22,670 --> 00:07:28,100
We've run across a problem you'll find yourself running into when creating widget areas and sidebars.

96
00:07:28,760 --> 00:07:34,610
From the beginning, WordPress really tries its best to not dictate exactly what you have to include.

97
00:07:35,120 --> 00:07:38,960
You can use a lot of your own success, JavaScript and HTML.

98
00:07:39,290 --> 00:07:45,380
However, widgets are a special case because the HTML for widgets are generated by WordPress.

99
00:07:45,830 --> 00:07:49,400
Anything generated by WordPress tends to be difficult to edit.

100
00:07:50,210 --> 00:07:54,280
The HTML and classes loaded don't match the ones with our template.

101
00:07:54,710 --> 00:07:59,060
I want you to remember that the template we're using was not built for WordPress.

102
00:07:59,480 --> 00:08:05,000
I want to show you it's completely possible to convert an HTML template into a WordPress theme.

103
00:08:05,600 --> 00:08:10,250
What we have here is a conflicting HTML NCIS situation.

104
00:08:11,990 --> 00:08:13,490
So how do we fix this?

105
00:08:13,640 --> 00:08:15,440
We have about three options.

106
00:08:15,710 --> 00:08:21,800
The first option is to override the HTML for these widgets and make WordPress load these widgets formatted

107
00:08:21,800 --> 00:08:24,280
the same way our HTML template does.

108
00:08:24,980 --> 00:08:30,950
The second option is to just create our own version of these widgets and have complete control over

109
00:08:30,950 --> 00:08:33,169
the HTML and information loaded.

110
00:08:33,860 --> 00:08:39,950
The final option is to edit the template CSS file so that they look similar to the HTML template.

111
00:08:40,460 --> 00:08:46,730
We will be going with option three because that's the simplest of the three trying to override the default

112
00:08:46,730 --> 00:08:47,590
WordPress widgets.

113
00:08:47,600 --> 00:08:49,580
It's more difficult than you can imagine.

114
00:08:50,000 --> 00:08:54,740
Actually, WordPress doesn't even provide you with a way to override these widgets.

115
00:08:55,040 --> 00:08:58,190
This forces you to try and hack the word press corps.

116
00:08:58,550 --> 00:09:04,910
If you have any experience with trying to hack a framework or CMS, then you know it can lead to massive

117
00:09:04,910 --> 00:09:05,450
headaches.

118
00:09:05,750 --> 00:09:11,030
So we'll just be editing the case file so that the widgets look similar to our theme.

119
00:09:11,360 --> 00:09:13,270
It's faster and way easier.

120
00:09:13,820 --> 00:09:17,710
A lot of developers tend to opt into this route because it's so simple.

121
00:09:18,110 --> 00:09:20,570
The second option is also commonly taken.

122
00:09:20,900 --> 00:09:27,290
It may seem redundant, but you also give yourself the opportunity to add more options that originally

123
00:09:27,290 --> 00:09:29,570
weren't available in the default widgets.

124
00:09:30,020 --> 00:09:32,480
It's completely allowed and even recommended.

125
00:09:33,930 --> 00:09:38,340
Will definitely be exploring how to create our own widgets in a future election.

126
00:09:38,700 --> 00:09:40,940
For now, we'll just go with option three.

127
00:09:41,310 --> 00:09:47,880
As I stated earlier, we won't focus so much on the HTML and assess since we have the freedom to use

128
00:09:47,880 --> 00:09:49,440
whatever frameworks we want.

129
00:09:49,720 --> 00:09:53,670
I'm going to actually give you all the success all at once.

130
00:09:54,000 --> 00:10:02,160
Inside the assets extra folder, you'll find a number of files that contain some HTML access already

131
00:10:02,160 --> 00:10:03,020
created for you.

132
00:10:03,450 --> 00:10:10,770
I want you to open the widgets, dash access, dot text file and paste the contents of this file into

133
00:10:10,770 --> 00:10:15,510
the custom that txt file inside the assets access folder.

134
00:10:15,960 --> 00:10:18,190
Just paste it into the very bottom of the file.

135
00:10:18,900 --> 00:10:25,110
If you're wondering how I did this, all I did was look at the HTML and classes WordPress generated.

136
00:10:25,260 --> 00:10:27,210
Then I just added my own styling.

137
00:10:27,570 --> 00:10:29,490
It was all trial and error.

138
00:10:29,790 --> 00:10:34,910
It is time consuming, but definitely the shortest and easiest route out of the three.

139
00:10:35,550 --> 00:10:41,670
If you plan on specializing in WordPress theme development, then this kind of error can be easily avoided

140
00:10:41,670 --> 00:10:45,060
by preparing your HTML templates to be WordPress ready.

141
00:10:45,870 --> 00:10:47,760
I'm going to refresh the page now.

142
00:10:48,090 --> 00:10:51,260
You'll notice that these don't look anything like our template.

143
00:10:51,630 --> 00:10:56,610
This is because we're very limited to what we can style and what we can add with WordPress widgets.

144
00:10:57,030 --> 00:11:03,420
I promise when we start creating widgets, we'll definitely recreate our own versions of these widgets

145
00:11:03,420 --> 00:11:05,730
with the original template styles and format it.

146
00:11:06,480 --> 00:11:12,090
Just so you know, a lot of commercial shops require that you format these widgets even if you provide

147
00:11:12,090 --> 00:11:13,590
better versions of these widgets.

148
00:11:13,890 --> 00:11:16,960
In the end, you never know which the user prefers.

149
00:11:16,980 --> 00:11:19,800
So it's best to accommodate all scenarios.

