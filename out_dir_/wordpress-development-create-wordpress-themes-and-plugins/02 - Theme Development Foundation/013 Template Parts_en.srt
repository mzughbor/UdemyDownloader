1
00:00:07,530 --> 00:00:13,470
After we pasted in the code into the loop, I started to notice that our code is becoming really nested.

2
00:00:13,860 --> 00:00:18,600
Not only that, I know for a fact that this part of the template is reusable.

3
00:00:18,930 --> 00:00:23,290
In a future, lecture's will be reusing this part of the template multiple times.

4
00:00:23,640 --> 00:00:26,070
Therefore, I want this to be reusable.

5
00:00:26,430 --> 00:00:32,100
Luckily, WordPress provides a solution for this by providing something called template parts.

6
00:00:32,670 --> 00:00:37,300
Template parts are reusable templates that we can add into any template we want.

7
00:00:37,770 --> 00:00:39,750
By themselves, they don't do anything.

8
00:00:40,080 --> 00:00:44,400
A template parts are meant to be used inside another template.

9
00:00:46,820 --> 00:00:51,530
In the resource section of this lecture, I provide a link to the function get template part.

10
00:00:52,010 --> 00:00:55,180
This function will load a template part into your template.

11
00:00:55,580 --> 00:00:58,830
It's similar to the get header and get footer functions.

12
00:00:59,150 --> 00:01:03,250
The only difference is that you can give your template parts any name you want.

13
00:01:03,650 --> 00:01:09,260
If we take a look at the parameters, you'll see there's only to the first parameter is the slug for

14
00:01:09,260 --> 00:01:12,530
the generic template and the second is for the specialized template.

15
00:01:14,940 --> 00:01:21,330
What does WordPress mean by generic and specialized templates, this function tends to confuse some

16
00:01:21,330 --> 00:01:21,930
developers.

17
00:01:21,960 --> 00:01:23,950
So let me break down how it works.

18
00:01:24,360 --> 00:01:29,460
This function will load a template, but it performs a lot of checks before it loads the template you

19
00:01:29,460 --> 00:01:30,100
specify.

20
00:01:30,480 --> 00:01:33,840
Here is the simplest example of the function being used.

21
00:01:34,410 --> 00:01:39,410
In order to load a template, you need to specify the path relative to the theme folder.

22
00:01:39,750 --> 00:01:43,200
In this case, WordPress will load a template named content.

23
00:01:44,760 --> 00:01:45,910
Pretty simple so far.

24
00:01:46,710 --> 00:01:49,710
Let's take a look at the second parameter being used now.

25
00:01:50,130 --> 00:01:56,700
In this example, we're passing in the phrase foo for the second parameter, WordPress will load either

26
00:01:56,700 --> 00:01:57,960
one of two templates.

27
00:01:58,290 --> 00:02:04,950
First, it'll combine both content and foo together into the filename content dash food.

28
00:02:05,480 --> 00:02:12,650
B If that template doesn't exist, then it'll search for the content template and load that instead.

29
00:02:13,110 --> 00:02:14,750
You can think of this as a backup.

30
00:02:15,390 --> 00:02:18,660
At this point you may be thinking, why don't we just do this?

31
00:02:18,960 --> 00:02:22,310
Why don't we just use the first parameter exclusively?

32
00:02:22,740 --> 00:02:24,660
You may be tempted to do this.

33
00:02:24,900 --> 00:02:25,820
For the most part.

34
00:02:25,860 --> 00:02:27,470
This is completely valid.

35
00:02:27,690 --> 00:02:29,410
However, I don't recommend it.

36
00:02:30,090 --> 00:02:36,000
The purpose of the second parameter is to give yourself a backup template just in case WordPress is

37
00:02:36,000 --> 00:02:37,740
unable to find your first choice.

38
00:02:38,280 --> 00:02:43,920
The only time you don't want to use the second parameter is when you know for a fact that you don't

39
00:02:43,920 --> 00:02:45,000
need a backup template.

40
00:02:47,930 --> 00:02:53,850
I'm going to go back to my editor and I'm going to create a new folder called Parshall's, this is where

41
00:02:53,850 --> 00:02:56,210
it will be storing all our template parts.

42
00:02:56,600 --> 00:02:58,850
You can name this folder, whatever you want.

43
00:02:59,210 --> 00:03:06,530
Parshall's is just a fancy word for parts of a template sometimes referred to as template parts or views

44
00:03:06,530 --> 00:03:09,480
by other developers inside this folder.

45
00:03:09,500 --> 00:03:12,590
I'm going to create another folder called Post.

46
00:03:12,980 --> 00:03:16,250
This is where will store template parts related to posts.

47
00:03:16,760 --> 00:03:22,580
Lastly, I'm going to create a file named Content Dash excerpt Pete.

48
00:03:24,890 --> 00:03:30,560
Once again, you can name this whatever you want, but it should accurately describe what's inside.

49
00:03:30,980 --> 00:03:35,030
I'm going to cut and paste the HTML code into this template like so.

50
00:03:48,620 --> 00:03:51,080
Now we have the excerpt in its own file.

51
00:03:51,560 --> 00:03:58,700
All we need to do now is load it inside the loop right after the post function called the function get

52
00:03:58,700 --> 00:03:59,480
template part.

53
00:04:00,080 --> 00:04:03,690
The path you have to pass in must be relative to the theme folder.

54
00:04:04,130 --> 00:04:07,760
This function basically does what the required function does.

55
00:04:08,540 --> 00:04:12,110
You may be thinking, why don't we just use the require function that?

56
00:04:12,530 --> 00:04:18,079
Well, it's because this function does a whole lot of checks for you and make sure it'll grab the template

57
00:04:18,079 --> 00:04:20,279
relative to the current installed directory.

58
00:04:20,839 --> 00:04:24,920
Keep in mind that you can use this function inside of template parts.

59
00:04:25,370 --> 00:04:29,640
So trying to keep track of where you are in your folder structure can get tricky.

60
00:04:30,170 --> 00:04:33,880
This function eases that by always pointing to the theme folder.

61
00:04:34,280 --> 00:04:38,090
All you have to do is point the path relative to the current theme.

62
00:04:38,630 --> 00:04:43,850
The great thing about this function is that you don't have to worry where you are in your template if

63
00:04:43,850 --> 00:04:48,860
you're inside a nested folder structure than the path you input here will always be the same.

64
00:04:49,460 --> 00:04:55,450
This is because it'll append the path you pass in onto the directory of the current activated the.

65
00:04:56,060 --> 00:05:02,270
The path to our file is Parshall's Post Content Dash excerpt.

66
00:05:04,640 --> 00:05:08,640
You do not need to add the extension, as it's added for you already.

67
00:05:09,200 --> 00:05:13,130
Let's check to see if this works and then we'll explore this function a bit more.

68
00:05:13,790 --> 00:05:18,580
After refreshing the page, you should see the static blog post appearing a few times.

69
00:05:19,130 --> 00:05:21,110
This is exactly what we wanted.

70
00:05:21,500 --> 00:05:25,100
Now let's go back and examine the two parameters for this function.

71
00:05:25,520 --> 00:05:29,080
I'm going to make a copy of this function and make one small change.

72
00:05:29,480 --> 00:05:33,830
I'm going to move the word excerpt into the second parameter like so.

73
00:05:36,380 --> 00:05:39,470
This is also a valid way to use this function.

74
00:05:39,960 --> 00:05:46,940
Earlier I told you about general and specialized templates, this function provides a way to display

75
00:05:46,940 --> 00:05:50,120
a default template in case a certain template is unavailable.

76
00:05:51,020 --> 00:05:52,730
Let's examine the first function.

77
00:05:52,730 --> 00:05:59,150
First, I'm going to add a comment above the template that will be loaded when this function runs is

78
00:05:59,150 --> 00:06:02,880
the content dash excerpt template file.

79
00:06:03,380 --> 00:06:07,670
However, if WordPress doesn't find this file, then nothing will be loaded.

80
00:06:08,420 --> 00:06:11,660
For this second function, WordPress behaves a bit differently.

81
00:06:12,080 --> 00:06:16,880
WordPress will look for a template called Content Dash excerpt PHP.

82
00:06:17,420 --> 00:06:22,260
WordPress will combine the two paths together, separating them with a dash.

83
00:06:22,610 --> 00:06:24,700
This is similar to what we did above.

84
00:06:25,010 --> 00:06:27,140
However, here's where things get different.

85
00:06:27,530 --> 00:06:34,760
If WordPress doesn't find the template content dash excerpt PHP and WordPress will look for a template

86
00:06:34,760 --> 00:06:36,230
called Content Dot.

87
00:06:37,780 --> 00:06:44,200
So basically, whatever is in the first parameter, if WordPress doesn't find this template, then nothing

88
00:06:44,200 --> 00:06:44,780
will be loaded.

89
00:06:45,160 --> 00:06:50,350
This behavior is really great as it allows you to create a fallback or default template.

90
00:06:50,800 --> 00:06:56,410
If we go back to the documentation, you should now understand that WordPress describes the default

91
00:06:56,440 --> 00:06:58,900
or fallback template as the generic template.

92
00:06:59,590 --> 00:07:04,840
If you want to load a template for a particular situation, then you can use the second parameter to

93
00:07:04,840 --> 00:07:05,650
your advantage.

94
00:07:06,070 --> 00:07:09,340
This is really great as you won't have to do the checks yourself.

95
00:07:09,550 --> 00:07:12,260
It's taken care of for you behind the scenes.

96
00:07:12,880 --> 00:07:16,710
A practical example would be loading a template for a specific month.

97
00:07:17,200 --> 00:07:23,710
For example, let's say I had a function called Get Month that returns the current month and this imaginary

98
00:07:23,710 --> 00:07:26,350
example, I'll have a template for the month, December.

99
00:07:26,950 --> 00:07:30,880
I'll end up having a file named Content Dasch Dec.

100
00:07:32,230 --> 00:07:34,680
This will be the only template for this month.

101
00:07:35,140 --> 00:07:37,200
Any other month will not have a template.

102
00:07:37,660 --> 00:07:42,040
Therefore I would just let all the other months fall back to just content.

103
00:07:43,570 --> 00:07:45,210
That's just the basic example.

104
00:07:45,560 --> 00:07:48,620
It's up to you how you want to use this anyway.

105
00:07:48,790 --> 00:07:52,150
I'm going to change this back to excerpt and comment it out.

106
00:07:54,890 --> 00:08:00,290
I don't plan on having multiple templates for the content dash excerpt, so this first line will do

107
00:08:00,290 --> 00:08:04,820
just fine in the next lecture will make the content generated dynamic.

