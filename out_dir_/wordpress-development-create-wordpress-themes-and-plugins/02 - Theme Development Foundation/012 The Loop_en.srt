1
00:00:07,860 --> 00:00:09,700
We're making great progress so far.

2
00:00:09,900 --> 00:00:12,090
It's time to start working on the posts.

3
00:00:12,420 --> 00:00:15,900
Before we do that, we'll have to talk about the loop first.

4
00:00:16,410 --> 00:00:21,620
In the resource section of this lecture, I provide a link to the Loop's Handbook page.

5
00:00:21,900 --> 00:00:22,720
Let's check it out.

6
00:00:22,920 --> 00:00:25,710
Here's what WordPress has to say about the loop.

7
00:00:26,400 --> 00:00:32,420
The loop is the default mechanism WordPress uses for outputting posts through a theme's template files.

8
00:00:32,790 --> 00:00:38,700
How many posts are retrieved is determined by the number of posts to show per page defined in the reading

9
00:00:38,700 --> 00:00:40,380
settings within the loop.

10
00:00:40,560 --> 00:00:46,350
WordPress retrieves each post to be displayed on the current page and formats it according to your theme's

11
00:00:46,350 --> 00:00:47,140
instructions.

12
00:00:47,820 --> 00:00:54,270
The Loop extracts the data for each post from the WordPress database and inserts the appropriate information

13
00:00:54,270 --> 00:00:55,950
in place of each template tag.

14
00:00:56,460 --> 00:01:01,620
Any HTML or code in the loop will be processed for each post.

15
00:01:02,190 --> 00:01:05,250
To put it simply, the loop is true to its name.

16
00:01:05,550 --> 00:01:11,730
It loops through each post retrieved for the current page one at a time and performs the action specified

17
00:01:11,730 --> 00:01:12,290
in your theme.

18
00:01:13,080 --> 00:01:18,960
So what WordPress is saying is that it's just a set of functions that WordPress provides so you can

19
00:01:18,960 --> 00:01:19,910
display posts.

20
00:01:20,370 --> 00:01:25,650
It's called the loop because you actually have to use these functions inside of a loop.

21
00:01:26,160 --> 00:01:28,710
The loop is basically an array of posts.

22
00:01:29,070 --> 00:01:34,080
Sometimes the loop will only have one post and sometimes it can have several posts.

23
00:01:34,470 --> 00:01:36,440
It varies from page to page.

24
00:01:36,660 --> 00:01:37,620
It's pretty simple.

25
00:01:37,620 --> 00:01:38,760
So let's get started.

26
00:01:39,480 --> 00:01:40,530
First things first.

27
00:01:40,530 --> 00:01:43,140
We have to add support for featured images.

28
00:01:43,440 --> 00:01:48,330
I'm currently looking at a function called Ad Team Support on the WordPress developer site.

29
00:01:48,840 --> 00:01:52,380
I'll provide a link to it in the resource section of this lecture.

30
00:01:53,190 --> 00:01:57,420
WordPress comes with some features that we can take advantage of right out of the box.

31
00:01:57,780 --> 00:02:03,540
It is possible and allowed for us to create our own version of these features, but that's beyond the

32
00:02:03,540 --> 00:02:04,680
scope of this course.

33
00:02:05,010 --> 00:02:09,660
It's also not common practice to do this, even in commercial themes.

34
00:02:10,289 --> 00:02:13,320
One of these features is called Post Thumbnails.

35
00:02:13,620 --> 00:02:19,740
All we have to do is call this function and pass him the post dash thumbnails argument and WordPress

36
00:02:19,740 --> 00:02:21,480
will activate the thumbnail feature.

37
00:02:21,960 --> 00:02:25,980
This feature will take care of generating a featured image in various sizes.

38
00:02:26,550 --> 00:02:32,130
If we take a look at the documentation, you'll notice that there is a second argument that allows you

39
00:02:32,130 --> 00:02:35,040
to specify certain options that come with each feature.

40
00:02:35,550 --> 00:02:42,000
If you scroll down far enough, you'll find more information specifically for the second parameter we

41
00:02:42,000 --> 00:02:44,490
can pass in an array of post types.

42
00:02:44,790 --> 00:02:51,150
We haven't talked about post types yet, but basically it's a way to categorize certain pieces of content.

43
00:02:51,600 --> 00:02:56,010
We can choose to specify which prototypes should have post thumbnails.

44
00:02:56,340 --> 00:03:01,620
If you don't pass in an array, then post thumbnails will be enabled for all post types.

45
00:03:02,310 --> 00:03:07,380
I prefer to enable thumbnails for all post types, so I'm not going to take advantage of the second

46
00:03:07,380 --> 00:03:07,920
parameter.

47
00:03:08,460 --> 00:03:12,420
It's always good practice to check to see if you can pass in more options.

48
00:03:12,660 --> 00:03:15,990
It allows you to customize certain features for your theme.

49
00:03:16,860 --> 00:03:18,330
Let's use this function now.

50
00:03:18,600 --> 00:03:22,590
Open your editor and edit the setup file right at the top.

51
00:03:22,590 --> 00:03:28,350
I'm going to call the add DM support function and pass in the value post dash thumbnails.

52
00:03:30,620 --> 00:03:36,520
To reiterate inside the function, we tell WordPress we'd like to support one of its built in features

53
00:03:36,860 --> 00:03:43,040
we pass in which feature we'd like to use in our case, we want to use the post bash thumbnails feature.

54
00:03:43,670 --> 00:03:44,180
That's it.

55
00:03:44,570 --> 00:03:49,490
To check if this feature is enabled, go to the admin dashboard and try viewing a post.

56
00:03:54,800 --> 00:04:01,940
On the side, you'll see a section for the featured image previously this didn't exist, but with one

57
00:04:01,940 --> 00:04:04,890
line of code, we were able to add this feature to our site.

58
00:04:05,390 --> 00:04:09,070
Keep in mind that enabling these features are totally optional.

59
00:04:09,440 --> 00:04:14,370
You are allowed to make your own versions of these features, but that's not generally common.

60
00:04:15,140 --> 00:04:19,320
It's much better to take advantage of the inbuilt solutions to help save time.

61
00:04:19,880 --> 00:04:25,970
Now that we're done, let's move on to the loop, go to your editor and open the index template.

62
00:04:26,330 --> 00:04:28,600
You'll find a comment that says posts.

63
00:04:28,910 --> 00:04:31,040
This is where we will be running the loop.

64
00:04:31,400 --> 00:04:34,040
You'll notice I have some static blog posts.

65
00:04:34,370 --> 00:04:35,840
We don't need this anymore.

66
00:04:35,840 --> 00:04:40,550
So let's delete all of them, except one will be using this one as a reference.

67
00:04:42,890 --> 00:04:49,580
Next, let's add some free tags and start coding the loop, I want to create a conditional statement.

68
00:04:51,770 --> 00:04:54,770
We're going to call a function called Have Posts.

69
00:04:56,850 --> 00:05:02,940
This function has no parameters, and it does one simple thing, it checks to see whether or not the

70
00:05:02,940 --> 00:05:04,930
current page has any posts.

71
00:05:05,550 --> 00:05:12,330
The question is, how does it know that what WordPress will do is read the user out just based on the

72
00:05:12,330 --> 00:05:18,830
Eurail WordPress will determine what posts should be displayed and how many it's all handled for you.

73
00:05:19,500 --> 00:05:24,530
Moving on, this function will return true or false, depending on what it finds.

74
00:05:24,930 --> 00:05:30,070
If true, then we should start displaying some posts before I continue.

75
00:05:30,180 --> 00:05:33,730
You'll notice I'm using curly brackets for my conditional statements.

76
00:05:34,110 --> 00:05:38,100
Let's open up the index template for the theme 2017.

77
00:05:40,620 --> 00:05:47,310
You'll notice that this team doesn't use curly brackets, instead, the developers use the end if statement

78
00:05:47,310 --> 00:05:48,870
for their conditional statements.

79
00:05:49,530 --> 00:05:51,210
This right here is preference.

80
00:05:51,210 --> 00:05:53,160
And what makes your code readable to you?

81
00:05:53,550 --> 00:05:56,600
If you want to use this style of coding, then go for it.

82
00:05:56,910 --> 00:06:01,970
You won't face any performance or security issues by using and if or curly brackets.

83
00:06:02,250 --> 00:06:04,640
It's all preference for this course.

84
00:06:04,650 --> 00:06:06,460
I'll be using curly brackets.

85
00:06:07,110 --> 00:06:11,820
Continuing on will create a while loop and call the same function again.

86
00:06:14,110 --> 00:06:19,120
This may seem like it'll run an infinite loop, but we can fix that easily in just a moment.

87
00:06:19,900 --> 00:06:24,880
Before we go any further, let's go into the reading settings page in the admin dashboard.

88
00:06:30,780 --> 00:06:37,260
There is an option for restricting the number of posts per page, let's set this to four so we can set

89
00:06:37,260 --> 00:06:38,840
up some pagination later on.

90
00:06:39,330 --> 00:06:43,590
Let's also set for each article in feed show to summary.

91
00:06:45,900 --> 00:06:51,240
After you saved your changes, let's go back to the index template inside the loop.

92
00:06:51,270 --> 00:06:53,760
We're going to call a function called the Post.

93
00:06:55,910 --> 00:07:02,000
This function does two things first, it will query the database and get the current post in the loop

94
00:07:02,390 --> 00:07:06,530
once again, WordPress is smart enough to know which post to grab.

95
00:07:06,980 --> 00:07:12,170
The second thing it does is check to see if there are any more posts after the current post.

96
00:07:12,500 --> 00:07:17,970
If there isn't, then the value returned by the half posts function will be false.

97
00:07:18,470 --> 00:07:20,940
This will stop the loop from running indefinitely.

98
00:07:21,620 --> 00:07:26,450
It's very important we call this function first before we do anything else inside the loop.

99
00:07:26,810 --> 00:07:31,140
Otherwise we'll end up just using the same post over and over again.

100
00:07:31,670 --> 00:07:34,970
This assures us that we'll get a new post on each iteration.

101
00:07:35,900 --> 00:07:41,540
So remember that static post I told you to leave in the template, let's cut and paste that inside the

102
00:07:41,540 --> 00:07:42,410
loop like so.

103
00:07:53,190 --> 00:07:56,880
That'll do it, let's refresh the home page and see what we get.

104
00:07:57,210 --> 00:07:59,820
You should now see the list of posts.

105
00:08:00,270 --> 00:08:01,630
All of them will be the same.

106
00:08:01,920 --> 00:08:04,020
It's pretty broken, but that's fine.

107
00:08:04,260 --> 00:08:05,320
We'll fix this soon.

108
00:08:05,760 --> 00:08:10,830
There should only be four posts since that's what we set in the reading settings page.

109
00:08:11,160 --> 00:08:14,100
And the next lecture will continue working on this.

