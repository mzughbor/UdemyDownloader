1
00:00:07,370 --> 00:00:13,100
Translation's has been a topic I've avoided for quite a bit of time, this is because translations can

2
00:00:13,100 --> 00:00:15,090
be a bit intimidating to newcomers.

3
00:00:15,320 --> 00:00:18,740
It's not at all, but it is kind of boring and time consuming.

4
00:00:19,160 --> 00:00:24,140
Throughout the years, developers have come up with solutions for translating scripts from creating

5
00:00:24,140 --> 00:00:27,620
arrays, classes or even pecl extensions.

6
00:00:27,920 --> 00:00:30,200
Each solution has its pros and cons.

7
00:00:30,500 --> 00:00:38,690
WordPress has decided to opt into the get text extension gets text isn't specific to be or WordPress.

8
00:00:38,960 --> 00:00:42,320
It's a standard created to help with translating programs.

9
00:00:42,740 --> 00:00:48,980
P2P implements get text into its programming language and WordPress leverages this by providing an API.

10
00:00:49,790 --> 00:00:56,300
The get text extension is a pretty hard concept to understand and use, so we won't be going over how

11
00:00:56,300 --> 00:00:56,930
it works.

12
00:00:57,260 --> 00:01:00,970
It's not really the end of the world if you don't know the whole logic behind it.

13
00:01:01,310 --> 00:01:05,870
For the most part, you never have to worry about checking to see if this extension is enabled.

14
00:01:06,290 --> 00:01:10,280
Most FB servers come with it installed and enabled by default.

15
00:01:10,670 --> 00:01:14,660
As a result, WordPress uses this translation system itself.

16
00:01:14,960 --> 00:01:18,800
If the get test extension doesn't work, then WordPress won't work.

17
00:01:19,010 --> 00:01:24,860
So it's safe to assume if a user installs our plugin, then they won't have any trouble with translations.

18
00:01:25,490 --> 00:01:31,220
And the resource section of this lecture, I provide a link to word précis internationalization Codex

19
00:01:31,220 --> 00:01:31,670
Page.

20
00:01:32,060 --> 00:01:34,070
Here's what WordPress has to say about it.

21
00:01:34,700 --> 00:01:40,880
Internationalisation is the process of developing your theme so it can easily be translated into other

22
00:01:40,880 --> 00:01:41,600
languages.

23
00:01:41,960 --> 00:01:49,160
Internationalization is often abbreviated as I n because there are 18 letters between the letters I

24
00:01:49,160 --> 00:01:53,990
and N seems like a complicated process, but I promise it's not.

25
00:01:54,500 --> 00:02:01,040
The first step to translating a plugin or theme is to make all strings inside the plugin or theme translatable.

26
00:02:01,610 --> 00:02:04,550
Fortunately for us, we've been doing that from the start.

27
00:02:04,970 --> 00:02:06,980
Let's go over some of these functions.

28
00:02:09,090 --> 00:02:15,060
All right, so now I'm inside my function's file and I've added in some examples of the translation

29
00:02:15,060 --> 00:02:18,180
functions available, you do not have to add these in.

30
00:02:18,420 --> 00:02:19,800
This is just an example.

31
00:02:20,460 --> 00:02:23,640
The first thing you need to understand is a text domain.

32
00:02:23,970 --> 00:02:29,010
I've gone over it before, but it's been quite some time since then, so I'm going to review it.

33
00:02:29,310 --> 00:02:33,060
A text domain is a unique ID for your translations.

34
00:02:33,450 --> 00:02:37,550
WordPress themes and plug ins will all come with their own translations.

35
00:02:37,830 --> 00:02:42,720
There is a possibility that there might be conflicting translations to prevent conflicts.

36
00:02:42,750 --> 00:02:44,190
You can use a text domain.

37
00:02:44,910 --> 00:02:50,880
Text domains give you the ability to specify where a translation should come from 99 percent of the

38
00:02:50,880 --> 00:02:51,240
time.

39
00:02:51,240 --> 00:02:54,960
You want to set the text domain to the name of your plugin or theme folder.

40
00:02:55,290 --> 00:02:56,850
In our case, it would be you.

41
00:02:56,850 --> 00:03:01,560
To me, WordPress will provide a set of functions for translating strings.

42
00:03:01,800 --> 00:03:07,920
For the most part, WordPress covers a lot of situations, so generally translating your theme or plugin

43
00:03:07,920 --> 00:03:08,570
isn't hard.

44
00:03:09,060 --> 00:03:11,690
We've been using some of these functions throughout the course.

45
00:03:12,390 --> 00:03:15,210
The first function is the double underscore function.

46
00:03:15,540 --> 00:03:19,530
The double underscore function is the most commonly used translation function.

47
00:03:19,530 --> 00:03:25,050
Out of all of them, it only has two parameters, which is the text to translate and the text domain.

48
00:03:25,470 --> 00:03:30,200
If there is no translation to be found, then WordPress will return the original string.

49
00:03:31,020 --> 00:03:33,420
This applies to most translation functions.

50
00:03:33,570 --> 00:03:37,580
If a translation can't be found, then the original string is used instead.

51
00:03:38,370 --> 00:03:43,530
The other function is the underscore e function, which does the same thing as the devil underscore

52
00:03:43,530 --> 00:03:47,420
function, except it'll echo out the value rather than returning it.

53
00:03:48,210 --> 00:03:54,330
The third function is the underscore X function, which allows you to provide context for a translation.

54
00:03:54,900 --> 00:03:58,620
There are words out there that are spelled the same but have different meanings.

55
00:03:58,920 --> 00:04:04,860
By using the underscore X function, you can provide a comment to the translator for more information.

56
00:04:05,280 --> 00:04:09,450
And this example I'm using the word Barsa without context.

57
00:04:09,450 --> 00:04:13,860
Then the translator might have a hard time figuring out which base I'm talking about.

58
00:04:14,670 --> 00:04:20,100
This function allows you to use the second parameter as a way to describe the translated text.

59
00:04:20,430 --> 00:04:24,300
It doesn't do anything for WordPress or affect the outcome of the string.

60
00:04:24,750 --> 00:04:27,870
Its purpose is just for the translators eyes only.

61
00:04:28,290 --> 00:04:32,880
In this example I'm telling the translator, I'm talking about the instrument base.

62
00:04:33,540 --> 00:04:37,530
The fourth function is the underscore and function, which is for plurals.

63
00:04:37,860 --> 00:04:39,840
This function has four parameters.

64
00:04:40,140 --> 00:04:43,230
The first parameter is for the singular version of the text.

65
00:04:43,590 --> 00:04:46,740
The second parameter is the plural version of the text.

66
00:04:47,070 --> 00:04:50,730
The third parameter is the most important one you pass in.

67
00:04:50,730 --> 00:04:54,480
And no, this can be hard coded or you can pass in a variable.

68
00:04:54,750 --> 00:04:57,300
In most cases you want to pass in the variable.

69
00:04:57,600 --> 00:05:00,240
However, in this example, I'm keeping it simple.

70
00:05:00,570 --> 00:05:06,060
If the value for this parameter is one, then the singular version of the translation is used.

71
00:05:06,300 --> 00:05:09,480
If the number is not one, then the plural version is used.

72
00:05:09,810 --> 00:05:13,230
I'm showing how to use both the singular or plural versions.

73
00:05:13,860 --> 00:05:16,890
The next function is the underscore X function.

74
00:05:17,190 --> 00:05:22,350
This function is a combination of the underscore X and underscore E functions.

75
00:05:22,620 --> 00:05:26,400
It will echo out a translated string that has a context.

76
00:05:27,030 --> 00:05:33,240
Likewise, we have the underscore and X which will return a singular or plural translation that has

77
00:05:33,240 --> 00:05:33,990
context.

78
00:05:34,440 --> 00:05:36,990
That basically sums it up for these set of functions.

79
00:05:37,080 --> 00:05:38,790
But there is one problem with them.

80
00:05:39,390 --> 00:05:43,650
These functions should be use caution because they don't provide escape's data.

81
00:05:44,070 --> 00:05:48,600
You should always want to make sure anything you output is secured and safe for the user.

82
00:05:49,020 --> 00:05:55,500
With that said, WordPress does provide a set of functions for escaping translated streams right below.

83
00:05:55,500 --> 00:05:57,660
I have some example of those functions.

84
00:05:58,350 --> 00:06:03,720
They are the same as the functions above, except they start with SC underscore HTML.

85
00:06:04,320 --> 00:06:09,000
These functions will not only translate strings but will also remove HTML.

86
00:06:09,540 --> 00:06:10,830
And this last example.

87
00:06:10,830 --> 00:06:12,930
I'm using a combination of functions.

88
00:06:13,290 --> 00:06:17,730
In some cases you may want to allow HTML in your translated strings.

89
00:06:18,090 --> 00:06:21,510
For these cases you'll have to use the double underscore function.

90
00:06:21,900 --> 00:06:25,440
However, you shouldn't allow all HTML to be passed.

91
00:06:25,740 --> 00:06:33,630
You can use the WP, underscore KSEE, underscore post function to remove any harmful HTML or attributes

92
00:06:33,630 --> 00:06:35,040
like I do in this example.

93
00:06:35,940 --> 00:06:41,400
All right, that pretty much sums up most of the translation functions, I highly recommend you give

94
00:06:41,400 --> 00:06:45,360
this page a good read for more techniques on how to perform translations.

95
00:06:45,930 --> 00:06:54,660
For the most part, I find myself using the e c underscore, html underscore, underscore and e c underscore

96
00:06:54,690 --> 00:07:01,330
html underscore e functions from my translations now that we have an overview of our functions.

97
00:07:01,350 --> 00:07:03,240
Let's start with translating our plugin.

98
00:07:03,600 --> 00:07:08,730
Since our plugin is translation ready, we have to inform WordPress where it can find the translation

99
00:07:08,730 --> 00:07:13,350
files in the main plug and file and the action hook plugins loaded.

100
00:07:22,920 --> 00:07:25,230
This hook will run when all plug ins are loaded.

101
00:07:25,590 --> 00:07:28,440
This is the recommended a hook for loading translation's.

102
00:07:29,010 --> 00:07:32,190
The function to call is R load text domain.

103
00:07:34,670 --> 00:07:40,320
Create a file in the includes folder named Text Domain and define the function here.

104
00:07:40,850 --> 00:07:43,850
Lastly, include this file from the main plugin file.

105
00:07:53,010 --> 00:07:57,960
Inside the function, we have to call the WordPress function load, plug in text domain.

106
00:08:00,400 --> 00:08:06,310
This function has three parameters, the first parameter is the name of the text domain, which is recipe,

107
00:08:06,730 --> 00:08:10,250
the text domain name should always be the name of the plugin folder.

108
00:08:10,690 --> 00:08:12,700
The second parameter is deprecated.

109
00:08:13,030 --> 00:08:16,320
WordPress keeps this parameter for backwards compatibility.

110
00:08:16,630 --> 00:08:18,400
We're going to set this to false.

111
00:08:18,980 --> 00:08:22,240
The third parameter is the location to our translation's.

112
00:08:22,510 --> 00:08:24,990
The path will be relative to the plugins folder.

113
00:08:25,360 --> 00:08:31,450
I'm going to create a variable named Plugin Dürer and set its value to recipe slash lane.

114
00:08:33,900 --> 00:08:39,840
We're going to store all our translations in a folder called Langue, it's important to note that you

115
00:08:39,840 --> 00:08:41,789
don't have to name your folder laying.

116
00:08:42,179 --> 00:08:43,990
It can be name, whatever name you want.

117
00:08:44,220 --> 00:08:48,490
However, a lot of plugins and themes used the name Lang as a convention.

118
00:08:49,200 --> 00:08:53,010
Lastly, let's create the folder laying inside the recipe plugin.

119
00:08:55,620 --> 00:09:02,220
That's it, WordPress will now load translations from this folder, however, we don't have any translations

120
00:09:02,520 --> 00:09:07,170
despite this, WordPress won't throw any errors if it can't find a translation.

121
00:09:07,650 --> 00:09:11,070
Now it's time to start generating some translations for our plugin.

122
00:09:13,960 --> 00:09:19,000
There are three important files when it comes to translating WordPress, plug ins and themes, that's

123
00:09:19,000 --> 00:09:22,200
the M.O. p0 and plot files.

124
00:09:22,450 --> 00:09:23,860
Each of these have a purpose.

125
00:09:24,460 --> 00:09:28,900
The plot file is a template that contains all the original translations.

126
00:09:29,260 --> 00:09:31,050
WordPress does not load this file.

127
00:09:31,360 --> 00:09:36,430
The purpose of this file is for translators to make a copy of this file and then change the text to

128
00:09:36,430 --> 00:09:37,600
their desired language.

129
00:09:37,960 --> 00:09:41,770
However, this is a file that should only be modified by a developer.

130
00:09:42,460 --> 00:09:49,470
The profile is like the plot file, except it's meant for translators to update, just like the plot

131
00:09:49,480 --> 00:09:49,940
file.

132
00:09:50,050 --> 00:09:54,050
These kinds of files are human readable, just like the plot file.

133
00:09:54,100 --> 00:09:57,220
This file is not processed or read by WordPress.

134
00:09:57,970 --> 00:10:00,840
The most file is a machine readable file.

135
00:10:01,180 --> 00:10:06,520
You should never open or edit these files as they contain text that only servers are able to read and

136
00:10:06,520 --> 00:10:06,970
use.

137
00:10:07,270 --> 00:10:10,300
M0 files are generated from files.

138
00:10:13,110 --> 00:10:16,330
Creating these files can be a bit challenging and time consuming.

139
00:10:16,620 --> 00:10:22,080
Luckily, Gentex has been around for quite some time and there are a lot of tools available for handling

140
00:10:22,080 --> 00:10:23,280
most of the work for us.

141
00:10:23,700 --> 00:10:29,820
I want you to go to plug ins, add new and search for a plug in and called local translate, install

142
00:10:29,820 --> 00:10:31,050
and activate this plug in.

143
00:10:37,090 --> 00:10:43,120
This is a free plug in for generating all the files you'll need for translations, it's constantly updated

144
00:10:43,120 --> 00:10:43,990
and user friendly.

145
00:10:44,380 --> 00:10:45,910
Let's get started with using it.

146
00:10:46,180 --> 00:10:50,160
The first step we must always take is to generate the pot file.

147
00:10:50,500 --> 00:10:53,830
I want you to go to local translate plugins.

148
00:10:56,390 --> 00:11:00,500
Here, you'll find a list of plugins available, click on the plugin recipe.

149
00:11:02,870 --> 00:11:08,060
You'll be told that there are no translations available for this plugin, if we were to click on the

150
00:11:08,060 --> 00:11:12,560
new language button, you'll be told that there is no template for local to work with.

151
00:11:13,130 --> 00:11:15,700
You'll be given the option of generating a template.

152
00:11:15,710 --> 00:11:16,880
So let's do that now.

153
00:11:17,540 --> 00:11:22,080
You'll be told how many files are going to be scanned and where the file will be created.

154
00:11:22,460 --> 00:11:23,960
Everything seems good for now.

155
00:11:23,960 --> 00:11:25,940
So let's click create template.

156
00:11:30,640 --> 00:11:33,980
You should see a success message telling you that the template was created.

157
00:11:34,390 --> 00:11:37,750
Let's go back to the editor and check to see if the file was created.

158
00:11:40,310 --> 00:11:45,470
Inside the recipe plug folder, you should find a file called recipe dot pot.

159
00:11:46,010 --> 00:11:48,380
Let's open the file and check out the contents.

160
00:11:48,620 --> 00:11:51,950
As you can see, the file contains all our translations.

161
00:11:52,250 --> 00:11:56,510
You'll first see this section where it contains information about the file itself.

162
00:11:56,870 --> 00:11:59,680
For the most part, you don't have to worry about this.

163
00:11:59,870 --> 00:12:02,720
It's mostly for the server to read and understand.

164
00:12:03,110 --> 00:12:06,300
Local has taken the time to optimize this for you already.

165
00:12:07,010 --> 00:12:10,850
If you scroll down a little further, you'll see a list of translations.

166
00:12:11,150 --> 00:12:14,210
Each translation is broken down into three parts.

167
00:12:15,190 --> 00:12:22,090
The first part is this comment, a hash is considered a comment inside this file local has taken the

168
00:12:22,090 --> 00:12:26,290
time to specify where you can find that translation by the filename and line number.

169
00:12:26,950 --> 00:12:30,280
Right after this, you'll see a key called magged.

170
00:12:30,700 --> 00:12:33,700
This will contain the original translation after.

171
00:12:33,700 --> 00:12:39,750
This is the MSgt CRC, which contains the text that the original text will be translated to.

172
00:12:40,270 --> 00:12:43,150
All you have to do is edit the text inside here.

173
00:12:43,510 --> 00:12:46,810
However, this file should be modified by developers only.

174
00:12:47,500 --> 00:12:52,720
If you are a translator, then you need to make a copy of this file and use the P0 extension.

175
00:12:53,020 --> 00:12:56,940
We can do this manually, but local translator can help us with this.

176
00:12:57,610 --> 00:13:00,610
Let's go back to the plugin page and see how to do this.

177
00:13:00,820 --> 00:13:02,920
I want you to click on New Language.

178
00:13:03,130 --> 00:13:07,750
You will be allowed to select your language, feel free to pick any language you want.

179
00:13:08,050 --> 00:13:09,790
I'm going to select French.

180
00:13:10,030 --> 00:13:12,460
You'll be then asked where you want to save this file.

181
00:13:12,740 --> 00:13:15,010
Be sure to select the author path.

182
00:13:15,610 --> 00:13:21,490
You may want to select the other paths as files can be overwritten, local will provide a directory

183
00:13:21,490 --> 00:13:23,200
for your translations if needed.

184
00:13:23,620 --> 00:13:28,960
Since we're the developer of this plugin, then it's perfectly fine to save it inside our plugin directory

185
00:13:29,320 --> 00:13:30,820
next click create.

186
00:13:34,290 --> 00:13:40,320
Local will then give you the opportunity to start translating your streams first, you must select the

187
00:13:40,320 --> 00:13:44,460
string you want to translate, then you'll see the translation below.

188
00:13:44,850 --> 00:13:49,170
You'll also see an input field where you can input the translation on the right.

189
00:13:49,170 --> 00:13:50,940
You'll see the comments box.

190
00:13:51,180 --> 00:13:57,150
If you can recall, we can give the translator some context just in case this is where that context

191
00:13:57,150 --> 00:13:57,770
will appear.

192
00:13:58,500 --> 00:14:01,260
I'm going to select the text and translate it.

193
00:14:01,560 --> 00:14:04,470
The translation for recipe is reset.

194
00:14:04,860 --> 00:14:06,240
Just to save some time.

195
00:14:06,270 --> 00:14:08,560
I'm not going to translate all the strings.

196
00:14:08,880 --> 00:14:11,640
The last step is to just click save when you're done.

197
00:14:14,530 --> 00:14:21,070
This will generate two files for you, a P.O. and MO file, if you open up your editor, you'll see

198
00:14:21,070 --> 00:14:22,670
these two files appear here.

199
00:14:22,990 --> 00:14:29,410
This is great and all, but I want these to appear inside my langue folder, so I'll move all my translations

200
00:14:29,410 --> 00:14:30,670
into the folder.

201
00:14:35,280 --> 00:14:41,250
This is one of the problems with local translate, it'll only load the translations inside the plugin

202
00:14:41,250 --> 00:14:43,550
and folder, even though you specify otherwise.

203
00:14:43,920 --> 00:14:46,860
Let's open the profile and check out what we got.

204
00:14:47,730 --> 00:14:49,870
The first thing you'll notice is the file name.

205
00:14:50,250 --> 00:14:55,920
This is very important when creating translations, when you translate to a specific language, you

206
00:14:55,920 --> 00:14:58,680
need to add the locale to the filename.

207
00:14:59,160 --> 00:15:03,450
The format for the file name is the text domain, followed by the local.

208
00:15:03,930 --> 00:15:07,320
Local will take care of setting up the correct locale for you.

209
00:15:08,070 --> 00:15:13,620
This file is exactly like the plot file, except it will contain all your translations.

210
00:15:14,040 --> 00:15:16,560
You're free to edit this file any time you'd like.

211
00:15:16,920 --> 00:15:19,830
The next file that's generated is the file.

212
00:15:20,160 --> 00:15:22,900
Under no circumstance should you open this file.

213
00:15:23,310 --> 00:15:27,630
This is because text editors tend to destroy the contents of this file.

214
00:15:28,110 --> 00:15:31,470
This file contains code that only machines can understand.

215
00:15:32,280 --> 00:15:33,510
Despite my warnings.

216
00:15:33,510 --> 00:15:34,980
I'm going to open this file.

217
00:15:35,250 --> 00:15:39,200
As you can see, there's all this gibberish that doesn't really make sense.

218
00:15:39,570 --> 00:15:45,990
The file is now corrupted, so I'll have to delete and generate it again to generate a file.

219
00:15:45,990 --> 00:15:51,690
You can just go to local and select the translation file and click this button that says M0.

220
00:15:52,440 --> 00:15:56,040
You'll be provided a download that you can then just add back to your plugin.

221
00:15:56,310 --> 00:15:57,600
I'm going to do this now.

222
00:15:58,880 --> 00:16:03,630
All right, so that's basically it for Translation's before and this lecture.

223
00:16:03,740 --> 00:16:07,770
I do want to introduce another tool for translating plug ins and themes.

224
00:16:08,270 --> 00:16:10,220
There is a program called Poyet.

225
00:16:10,230 --> 00:16:15,670
It is a premium tool for generating promo and Potti files.

226
00:16:15,920 --> 00:16:19,520
It provides an interface that will take care of doing all the coding for you.

227
00:16:19,940 --> 00:16:25,110
It also helps with translations into various languages, even if you don't know the language yourself.

228
00:16:25,820 --> 00:16:29,780
One of the benefits of using Poyet is that it has support for WordPress.

229
00:16:30,110 --> 00:16:34,470
It will scan your plug ins and themes and look for translation so that you don't have to.

230
00:16:34,880 --> 00:16:38,900
However, to access those features, you will have to pay for the pro version.

231
00:16:39,260 --> 00:16:40,970
I highly recommend you do so.

232
00:16:41,300 --> 00:16:44,540
It's definitely worth the money and it will save you a lot of time.

233
00:16:44,930 --> 00:16:49,630
It's especially useful if you have a large plugin with tons of translatable text.

234
00:16:50,240 --> 00:16:55,790
I prefer Poyet it because the translations tend to be more accurate and it will save files in the correct

235
00:16:55,790 --> 00:16:56,170
spot.

236
00:16:56,990 --> 00:17:00,860
I'll provide a link to this program in the resource section of this lecture.

237
00:17:01,430 --> 00:17:07,760
Install it and if you can purchase the pro version before I finish this lecture, I want to test this

238
00:17:07,760 --> 00:17:08,540
translation.

239
00:17:08,780 --> 00:17:14,750
I'm going to go to Settings General in the WordPress admin dashboard, scroll to the bottom and change

240
00:17:14,750 --> 00:17:18,710
the site language to French or as WordPress calls it, Francois.

241
00:17:22,060 --> 00:17:23,800
Let's view one of the recipes.

242
00:17:26,079 --> 00:17:32,290
As you can see, our plug in has translated this text to French, I believe I've missed a few translations

243
00:17:32,290 --> 00:17:35,040
in the process, but overall it's good to go.

244
00:17:35,470 --> 00:17:37,630
That concludes translating a plug in.

245
00:17:37,930 --> 00:17:40,050
Translating a theme is the same process.

246
00:17:40,180 --> 00:17:41,760
So go give it a try.

