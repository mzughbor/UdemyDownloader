1
00:00:07,330 --> 00:00:11,080
And this lecture will be exploring what modules are and how to use them.

2
00:00:11,380 --> 00:00:13,690
Right now I'm on the jury website.

3
00:00:13,960 --> 00:00:15,460
You know what Jay Creary is?

4
00:00:15,470 --> 00:00:16,570
You've used it before.

5
00:00:16,570 --> 00:00:23,470
And it's fairly easy to use in order to use Jorquera on your site, you have to create some script tags

6
00:00:23,470 --> 00:00:25,920
and pass in the path to the jury file.

7
00:00:26,380 --> 00:00:31,640
The browser will automatically load this file for you and then you can use Jaquie anywhere on your site.

8
00:00:32,110 --> 00:00:34,020
The process is pretty straightforward.

9
00:00:34,240 --> 00:00:41,710
Unfortunately, this process only applies to the browser, for you can't use script tags to include

10
00:00:41,710 --> 00:00:43,010
external JavaScript code.

11
00:00:43,450 --> 00:00:46,690
The process is slightly different and requires a little bit of work.

12
00:00:47,020 --> 00:00:51,850
And the resource section of this lecture I provide a link to the common site.

13
00:00:52,360 --> 00:00:55,830
Common JS is a JavaScript module loader as it states here.

14
00:00:56,170 --> 00:01:00,630
In other words, it's a way for you to load JavaScript code from external files.

15
00:01:00,940 --> 00:01:04,629
You'll hear the word modules a lot throughout this course.

16
00:01:04,900 --> 00:01:09,580
A module is just a fancy word for a JavaScript file that you include into your code.

17
00:01:09,940 --> 00:01:13,240
I'm oversimplifying it, but that's basically what it is.

18
00:01:13,930 --> 00:01:19,020
Common JS is a library that allows you to load JavaScript code with more JavaScript code.

19
00:01:19,390 --> 00:01:24,170
You can think of it like loading a few file with the include or require functions.

20
00:01:24,550 --> 00:01:28,200
This means you don't have to use HTML to load your files.

21
00:01:28,420 --> 00:01:31,950
You can download this library and then load it in your browser to get started.

22
00:01:32,140 --> 00:01:33,350
We won't be doing this.

23
00:01:33,520 --> 00:01:37,490
This is because Node already uses the common JS format already.

24
00:01:37,900 --> 00:01:40,240
Let's take a deeper look on the sidebar.

25
00:01:40,240 --> 00:01:43,240
You'll find the link used with Node here.

26
00:01:43,270 --> 00:01:46,660
You'll find information on how to use common G.S. with Node.

27
00:01:47,290 --> 00:01:52,990
On this page, the developer tells you that node isn't using the common JS loader specifically.

28
00:01:53,380 --> 00:01:59,830
Instead, Node is using its own implementation of common JS with the same format and concept.

29
00:02:00,190 --> 00:02:06,040
The node module loader is very similar to the common JS module loader, but you need to understand that

30
00:02:06,040 --> 00:02:08,039
they aren't one hundred percent the same.

31
00:02:08,740 --> 00:02:08,949
What?

32
00:02:08,949 --> 00:02:15,700
That being said, let's take a look at how to use the module loader, open the index JS file we created

33
00:02:15,700 --> 00:02:16,180
earlier.

34
00:02:16,510 --> 00:02:18,970
I'm going to comment about the code we had previously.

35
00:02:19,660 --> 00:02:25,300
As I stated earlier, node already prepares the module load or library for you, so you don't have to

36
00:02:25,300 --> 00:02:26,620
do anything to set it up.

37
00:02:27,070 --> 00:02:29,550
You can get started with using modules right away.

38
00:02:29,920 --> 00:02:33,400
There are usually three kinds of modules you'll be dealing with.

39
00:02:33,880 --> 00:02:40,100
There are modules you create, modules that node creates and modules that other users create.

40
00:02:40,660 --> 00:02:43,630
Let's get started with creating our own modules.

41
00:02:43,910 --> 00:02:47,820
I'm going to create a file named Functions JS.

42
00:02:50,160 --> 00:02:56,520
Inside this file, I'm going to create a symbol function named my funk, and all it will do is output

43
00:02:56,520 --> 00:02:57,900
a hello world message.

44
00:03:00,260 --> 00:03:06,710
All right, now I have two files which aren't connected to node, both of these files are considered

45
00:03:06,710 --> 00:03:07,450
modules.

46
00:03:07,760 --> 00:03:09,200
You heard that correctly.

47
00:03:09,530 --> 00:03:12,440
All JavaScript files are considered modules.

48
00:03:12,440 --> 00:03:16,970
As far as Node is concerned, the main module is what's called the entry point.

49
00:03:17,600 --> 00:03:22,100
The entry point file is the very first file that should be executed by node.

50
00:03:22,550 --> 00:03:25,220
The index file will be the entry file.

51
00:03:25,230 --> 00:03:28,510
So we'll have to load the functions module into this file.

52
00:03:29,000 --> 00:03:31,640
To do that, we have to first create a variable.

53
00:03:31,940 --> 00:03:34,670
I'm going to name my variable FNC.

54
00:03:35,360 --> 00:03:39,230
We will set this value to the value returned by the function require.

55
00:03:41,310 --> 00:03:45,970
This function has one parameter, which is the name of the module you'd like to load.

56
00:03:46,410 --> 00:03:49,530
I'm going to pass in the name of the file, which is functions.

57
00:03:51,950 --> 00:03:57,860
You do not need to append the extension as node will always assume you want to load a JavaScript file.

58
00:03:58,250 --> 00:04:02,330
However, we do have to prepend a dot forward slash.

59
00:04:02,630 --> 00:04:07,880
This will tell no Jast that the module is located in the same directory as the file.

60
00:04:08,570 --> 00:04:12,200
Keep in mind that the variable name can be named anything you want.

61
00:04:12,590 --> 00:04:18,079
In most examples and tutorials, most developers tend to name their variables after the name of the

62
00:04:18,079 --> 00:04:19,750
module in lowercase letters.

63
00:04:20,420 --> 00:04:25,530
This single line of code will load a module and we can reference the module using this variable.

64
00:04:26,060 --> 00:04:29,940
The question is what exactly gets loaded and how is it loaded?

65
00:04:30,530 --> 00:04:33,040
This line of code won't technically work yet.

66
00:04:33,380 --> 00:04:36,560
We have to now export our module before we can use it.

67
00:04:36,980 --> 00:04:42,710
Exporting a module simply means that you're telling node what parts of your code can be used outside

68
00:04:42,710 --> 00:04:43,340
of the file.

69
00:04:43,820 --> 00:04:48,030
Let's explore how that works inside the functions file.

70
00:04:48,080 --> 00:04:50,450
I'm going to use an object called module.

71
00:04:52,690 --> 00:04:59,380
This object is defined for you by a. this object contains properties related to the current model it's

72
00:04:59,380 --> 00:05:03,430
being used in, in our case, this would be the functions file.

73
00:05:03,820 --> 00:05:09,320
Every single file is provided a module object with properties specific to that file.

74
00:05:10,060 --> 00:05:13,780
As I stated earlier, every single file is considered a module.

75
00:05:13,780 --> 00:05:20,470
As far as note is concerned, this module object has a property called exports, which you can assign

76
00:05:20,470 --> 00:05:21,670
any value you want.

77
00:05:22,150 --> 00:05:27,640
The value of this property determines what values other models can access from this module.

78
00:05:28,450 --> 00:05:31,930
I'm going to set this to my func, which is the function above.

79
00:05:34,290 --> 00:05:37,450
Now I can use the function inside the index file.

80
00:05:37,680 --> 00:05:38,700
I'm going to call it.

81
00:05:43,010 --> 00:05:47,470
I'll go over what's going on in just a moment, but first, let's check if this works.

82
00:05:47,750 --> 00:05:50,840
I'm going to run the node index command again.

83
00:05:52,990 --> 00:05:56,370
As you can see, the message was outputted without any error.

84
00:05:56,620 --> 00:05:58,380
Let me recap what's going on here.

85
00:05:59,020 --> 00:06:06,580
The very first thing we do is create a variable named FWC creating a variable is required if you want

86
00:06:06,580 --> 00:06:11,650
to use a module, as this variable will act as a way to reference the code inside the module.

87
00:06:12,160 --> 00:06:18,250
To load a module, you have to use the function, require this function, will load the module you pass

88
00:06:18,250 --> 00:06:18,460
in.

89
00:06:18,910 --> 00:06:23,790
In our case, this would be the functions file inside the functions file.

90
00:06:23,800 --> 00:06:27,270
We have a variable named my func that is assigned to a function.

91
00:06:27,580 --> 00:06:34,090
This function will output a message onto the console node, will load this module into the index file.

92
00:06:34,300 --> 00:06:39,070
However, it will not load the variables, functions or objects from this file.

93
00:06:39,400 --> 00:06:46,330
Instead, it'll look inside the module, exports property and just return the data inside that property.

94
00:06:46,780 --> 00:06:51,730
So in order to pass in our data, we have to assign our data to this property.

95
00:06:52,120 --> 00:06:58,300
Once the module is loaded, we can then just use the data from the module exports property freely.

96
00:06:58,660 --> 00:07:01,720
In our case, this would be the function that outputs a message.

97
00:07:02,080 --> 00:07:06,830
Lastly, we just call the function and the message will be outputted onto the console.

98
00:07:07,510 --> 00:07:08,770
Let me prove this further.

99
00:07:08,980 --> 00:07:15,010
I'm going to define a variable named Foo inside the functions file and assign its value to five.

100
00:07:17,290 --> 00:07:21,520
Then I'm going to go back to my index file and try to log this variable.

101
00:07:24,750 --> 00:07:30,480
If I were to run my command again, I'll get this error stating that the variable FUX is undefined,

102
00:07:30,870 --> 00:07:37,050
even though this variable is defined inside the functions file and I'm loading the module, this variable

103
00:07:37,050 --> 00:07:40,530
is not made available globally to every file that uses it.

104
00:07:41,220 --> 00:07:47,160
In order to use this variable, we have to assign the module exports property to this variable.

105
00:07:47,730 --> 00:07:51,510
Let's say I wanted to pass in multiple values to do this.

106
00:07:51,630 --> 00:07:55,410
We can simply create an object and then assign the data like so.

107
00:08:00,980 --> 00:08:07,190
Since we're returning an object, we have to update the index file to access those properties, change

108
00:08:07,190 --> 00:08:14,720
funk to funk, dot my funk and to access the full property, we have to call it as Funk Dafu.

109
00:08:16,980 --> 00:08:22,380
Let's run the command one more time and we should see the message being outputted along with the value

110
00:08:22,380 --> 00:08:22,800
of food.

111
00:08:23,610 --> 00:08:28,150
All right, so that's how you load code from one file into another.

112
00:08:28,530 --> 00:08:29,990
I want to dig deeper, though.

113
00:08:30,150 --> 00:08:31,530
Here's what I'm going to do.

114
00:08:31,840 --> 00:08:36,600
I'm going to comment up the food variable from being logged inside the index file.

115
00:08:39,010 --> 00:08:46,630
Then I'm going to clear up my console, I'm going to console log the module object in both files.

116
00:08:50,360 --> 00:08:56,150
Then I'm going to update my function to output a long list of equal signs so we can see the difference

117
00:08:56,150 --> 00:08:57,650
between these two outputs.

118
00:08:59,900 --> 00:09:03,890
After doing this, I want you to run the command node index.

119
00:09:06,090 --> 00:09:12,450
And the output, you'll see two objects being outputted, as you can see, no takes care of setting

120
00:09:12,450 --> 00:09:14,370
the values for both these modules.

121
00:09:15,000 --> 00:09:21,300
Each object will have a property named filename which will let you know which module object belongs

122
00:09:21,300 --> 00:09:22,050
to which file.

123
00:09:22,560 --> 00:09:25,130
Both modules have an exports property.

124
00:09:25,500 --> 00:09:31,410
If you take a look at the functions module, then you'll notice the export property is filled with both

125
00:09:31,410 --> 00:09:33,400
the function and the foo variable.

126
00:09:34,170 --> 00:09:39,060
These are the values that the index JS file will get when loading this module.

127
00:09:39,510 --> 00:09:45,180
The index module has no exports, so the exports for that file will be an empty object.

128
00:09:45,870 --> 00:09:49,080
Another thing I want you to notice is the parents property.

129
00:09:49,380 --> 00:09:54,120
The parents property will tell you if the module is being loaded from another module.

130
00:09:54,480 --> 00:09:59,400
As you can see, the functions module has the index module as its parent.

131
00:09:59,880 --> 00:10:04,080
The index module has no parents because it is the entry point file.

132
00:10:04,800 --> 00:10:11,190
However, the index module will have the children property, which will tell you what modules this module

133
00:10:11,190 --> 00:10:11,760
is loading.

134
00:10:12,240 --> 00:10:17,710
Something you should keep in mind is that children modules can and are allowed to load more modules.

135
00:10:18,000 --> 00:10:21,720
This creates a module tree structure for the most part.

136
00:10:21,750 --> 00:10:26,520
You never have to worry about these properties as node takes care of filling them out for you.

137
00:10:26,850 --> 00:10:32,970
It's uncommon and not recommended that you modify any of these properties except for the exports property.

138
00:10:33,750 --> 00:10:34,200
All right.

139
00:10:34,350 --> 00:10:40,320
Now that we understand the basics of modules, let's explore some modules that node provides and third

140
00:10:40,320 --> 00:10:42,210
party modules in the next lecture.

