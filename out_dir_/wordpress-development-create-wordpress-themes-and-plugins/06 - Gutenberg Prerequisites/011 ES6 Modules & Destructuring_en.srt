1
00:00:07,470 --> 00:00:13,140
He has six modules and the structuring are two new features introduced in JavaScript in this lecture

2
00:00:13,170 --> 00:00:14,570
will be learning both of these.

3
00:00:14,760 --> 00:00:19,110
It's important to know that these two features are completely independent of each other.

4
00:00:19,410 --> 00:00:21,650
You can use either feature without the other.

5
00:00:22,170 --> 00:00:26,760
With that being said, it's actually common practice to use these two features together.

6
00:00:27,120 --> 00:00:30,430
We will be exploring how that's done to start things off.

7
00:00:30,450 --> 00:00:34,410
I want you to create a file named Functions, James.

8
00:00:36,560 --> 00:00:41,450
In previous lectures, we would load modules using the require function for node.

9
00:00:41,600 --> 00:00:42,900
This was perfectly fine.

10
00:00:43,170 --> 00:00:45,920
However, we want to use this code on the browser.

11
00:00:46,370 --> 00:00:50,840
Using the require function is the common method of loading modules.

12
00:00:51,230 --> 00:00:56,990
This is perfectly acceptable for node modules, but I want these files to load on the front where common

13
00:00:56,990 --> 00:00:59,150
JS modules are not supported natively.

14
00:00:59,750 --> 00:01:03,770
S6 modules are the official way to load modules in JavaScript.

15
00:01:04,099 --> 00:01:06,720
Creating and using modules is fairly easy.

16
00:01:07,040 --> 00:01:09,060
We'll just have to do things differently.

17
00:01:09,650 --> 00:01:11,600
Let's start with the functions file.

18
00:01:11,900 --> 00:01:14,790
This file will be a module for the index file.

19
00:01:15,140 --> 00:01:20,420
I'm going to create a constant named halo that will be set to an arrow function.

20
00:01:20,870 --> 00:01:24,650
The arrow function will just console log a simple message.

21
00:01:26,850 --> 00:01:32,670
To export a model and the style of S6, we will have to use the export default keywords.

22
00:01:35,000 --> 00:01:38,420
Right after this, we have to specify what we want to export.

23
00:01:38,780 --> 00:01:43,010
I want to export the hello constant with six modules.

24
00:01:43,010 --> 00:01:46,240
You can export multiple values to export a value.

25
00:01:46,280 --> 00:01:48,760
You just need to use the export keyword.

26
00:01:49,160 --> 00:01:52,690
You can actually just use the export key word by itself.

27
00:01:52,700 --> 00:01:56,740
But if we were to remove the default key word, then we would get an error.

28
00:01:57,290 --> 00:02:02,540
I want to explain why, but it's kind of hard to explain without learning about what the structuring

29
00:02:02,540 --> 00:02:03,170
is first.

30
00:02:03,470 --> 00:02:10,220
For now, let's pretend you can only export one value and to export that value you need both the export

31
00:02:10,220 --> 00:02:11,600
and default keywords.

32
00:02:12,150 --> 00:02:16,720
And this example, we're going to pretend that we can only export this halo function.

33
00:02:17,090 --> 00:02:20,090
This is all you need to do in order to export a module.

34
00:02:20,540 --> 00:02:22,820
Let's learn how to import this module.

35
00:02:23,090 --> 00:02:24,800
Go back to the index file.

36
00:02:25,280 --> 00:02:31,520
I'm going to input the following import functions from Dotzler function Jase's.

37
00:02:33,730 --> 00:02:39,110
Let me break down what's going on here to import a module, you need to use the import keyboard.

38
00:02:39,520 --> 00:02:42,010
This key actually does two things.

39
00:02:42,190 --> 00:02:46,900
It will import a module and give you the opportunity to assign the module a variable name.

40
00:02:47,500 --> 00:02:49,720
All expand more on this in just a moment.

41
00:02:50,020 --> 00:02:54,160
The next thing that you need to do is specify where that module can be found.

42
00:02:54,550 --> 00:03:01,300
Use the key word from to let JavaScript know you want to specify the path to the module to specify a

43
00:03:01,300 --> 00:03:03,210
path relative to this module.

44
00:03:03,250 --> 00:03:07,390
You have to use the dart forward slash followed by the name of the module.

45
00:03:07,700 --> 00:03:10,190
In this case, it would be the functions file.

46
00:03:10,840 --> 00:03:15,670
This one line of code will import the module, then you can just use it normally.

47
00:03:19,550 --> 00:03:25,610
If we did everything correctly, then we should be able to run the NPM run, start command without any

48
00:03:25,610 --> 00:03:26,150
errors.

49
00:03:28,420 --> 00:03:34,840
Let's test this by opening the index HTML file and checking the console, you should see the message

50
00:03:34,840 --> 00:03:35,670
being outputted.

51
00:03:36,310 --> 00:03:40,030
This is a very basic example on how to export and import modules.

52
00:03:40,360 --> 00:03:46,150
When it comes to exporting modules, you will most likely be writing this kind of syntax 90 percent

53
00:03:46,150 --> 00:03:46,740
of the time.

54
00:03:47,230 --> 00:03:50,570
However, for importing modules, the syntax will vary.

55
00:03:50,920 --> 00:03:56,140
I want to go more in-depth into that, but we first need to learn what de structuring is.

56
00:03:56,740 --> 00:04:00,640
The restructuring is a very simple concept to understand and use.

57
00:04:01,030 --> 00:04:06,580
These structuring allows you to extract properties from objects and arrays into their own standalone

58
00:04:06,580 --> 00:04:07,250
variables.

59
00:04:07,630 --> 00:04:09,010
Let's look at an example.

60
00:04:09,310 --> 00:04:11,940
I'm going to insert this code right below here.

61
00:04:12,460 --> 00:04:18,850
I'm going to create a variable named LBJ and this will be an object with two properties called Prop

62
00:04:18,850 --> 00:04:20,019
one and Prop two.

63
00:04:20,450 --> 00:04:24,310
I'm going to set Prop one to five and Prop two to 10.

64
00:04:26,560 --> 00:04:28,600
Now, I'm going to log Propp to.

65
00:04:30,780 --> 00:04:36,010
To access a property, you have to specify the object and then follow it up with the property name.

66
00:04:36,390 --> 00:04:39,390
However, doing it like this can get rather annoying.

67
00:04:39,750 --> 00:04:45,120
In a regular application, you may end up having dozens of objects and it would be annoying to have

68
00:04:45,120 --> 00:04:48,030
to constantly type each object and its property.

69
00:04:48,750 --> 00:04:52,230
This also makes your code less readable and gives it a nested feeling.

70
00:04:52,680 --> 00:04:54,480
Before we hand the structuring.

71
00:04:54,480 --> 00:04:56,610
You would usually do something like this.

72
00:04:57,060 --> 00:05:00,440
You would create a variable and assign its value to the property.

73
00:05:02,620 --> 00:05:07,790
That's fine and all, but it can become increasingly annoying each time you have to do this.

74
00:05:08,290 --> 00:05:11,050
This is where destruction comes into play.

75
00:05:11,470 --> 00:05:14,680
To structure a variable, you need to do the following.

76
00:05:15,100 --> 00:05:21,070
You can use any of the variable keywords and then follow it up with a pair of curly brackets by adding

77
00:05:21,070 --> 00:05:22,120
these curly brackets.

78
00:05:22,120 --> 00:05:26,530
You're telling JavaScript you want to grab properties and put them into their own variable.

79
00:05:27,130 --> 00:05:31,780
You simply pass in the name of the properties, which are Prop one and Prop two.

80
00:05:32,260 --> 00:05:37,070
You have the option of de structuring all the properties or just a select few.

81
00:05:37,660 --> 00:05:43,200
The next thing you need to specify is which object where these properties can be found, which is OBJ.

82
00:05:44,110 --> 00:05:47,410
This line of code does the same thing as the line above it does.

83
00:05:47,620 --> 00:05:50,800
I'm going to comite out the traditional way of doing this.

84
00:05:52,970 --> 00:06:00,260
Then I'm going to update my log function to use the prop to variable, rather than accessing the object

85
00:06:00,260 --> 00:06:06,020
variable, run the NPM run start command, you shouldn't receive any errors.

86
00:06:06,170 --> 00:06:10,370
Check out the index template to see if a number 10 is being outputted.

87
00:06:12,800 --> 00:06:17,420
By itself, this really is an impressive this is a super simple feature.

88
00:06:17,690 --> 00:06:23,210
It was introduced because it makes you write less code and I would say it's more or less readable than

89
00:06:23,210 --> 00:06:24,150
the previous method.

90
00:06:24,740 --> 00:06:26,270
I'm going to comment this out.

91
00:06:26,510 --> 00:06:32,410
While the structuring can be used by itself, you will usually see it used with importing modules.

92
00:06:32,780 --> 00:06:38,360
I'm going to go back to my functions file and I'm going to export a variable named NUM with a value

93
00:06:38,360 --> 00:06:38,990
of five.

94
00:06:42,720 --> 00:06:49,290
We will no longer pretend that we can only export one thing to export multiple pieces of data, you

95
00:06:49,290 --> 00:06:52,940
can just use the export keyboard followed by the name and the value.

96
00:06:53,340 --> 00:06:54,760
I'm going to stop right there.

97
00:06:55,050 --> 00:06:58,950
JavaScript requires that you export a name and value.

98
00:06:59,670 --> 00:07:04,310
If we were to just export the number five by itself, then we would get an error.

99
00:07:04,830 --> 00:07:07,690
You are expected to export a name and value pair.

100
00:07:08,070 --> 00:07:12,080
You cannot just export a value and you cannot just export a name.

101
00:07:12,750 --> 00:07:18,190
If I were to restore this and remove the number five this time, then I would get an error from webapp.

102
00:07:18,540 --> 00:07:20,960
This is super important to understand.

103
00:07:21,210 --> 00:07:23,480
I have to pass in a name and a value.

104
00:07:24,120 --> 00:07:29,520
This is why you would get an error if you were to just export the helo function without the default

105
00:07:29,520 --> 00:07:30,000
keyword.

106
00:07:30,450 --> 00:07:33,560
You were only giving value, but you're not giving it a name.

107
00:07:33,990 --> 00:07:37,070
JavaScript doesn't care that you define the variable above.

108
00:07:37,290 --> 00:07:40,520
You have to give it a name and value on the same line.

109
00:07:41,190 --> 00:07:48,750
So what does the default keyword do that the default keyword allows you to give a default exported value.

110
00:07:49,230 --> 00:07:51,810
You are allowed to export multiple values.

111
00:07:52,050 --> 00:07:57,450
Since you can export multiple values, then you also have the option of importing all those values or

112
00:07:57,450 --> 00:07:59,970
some of those values or just one of those values.

113
00:08:00,540 --> 00:08:05,670
Inside the import statement, you can specify what value you'd like to import.

114
00:08:06,030 --> 00:08:10,530
And this example, we're actually not specifying any particular data.

115
00:08:11,010 --> 00:08:14,640
Even though we have a halo function inside the functions file.

116
00:08:14,790 --> 00:08:17,430
This line will not grab the halo function.

117
00:08:17,610 --> 00:08:19,800
Instead, it'll grab the default value.

118
00:08:20,430 --> 00:08:25,440
With that being said, I don't have to name this halo inside my import statement.

119
00:08:25,890 --> 00:08:27,330
This is just a reference.

120
00:08:27,570 --> 00:08:30,810
Since it's a reference, I can change this to whatever name I want.

121
00:08:31,140 --> 00:08:35,640
I can change this to Foo and then I can update my code to reflect that change.

122
00:08:35,640 --> 00:08:36,690
And this would still work.

123
00:08:37,320 --> 00:08:41,940
This line is saying, hey, I want to import some code from the functions files.

124
00:08:42,210 --> 00:08:44,850
I'm not specifying any particular data.

125
00:08:44,850 --> 00:08:47,580
So give me whatever the default export value is.

126
00:08:47,880 --> 00:08:54,750
I want you to assign the value, return it to a variable named Foo to prove this further, I'm going

127
00:08:54,750 --> 00:08:57,330
to run the NPM Run start command.

128
00:08:59,670 --> 00:09:03,630
I didn't receive any errors then I'm going to view the page again.

129
00:09:06,180 --> 00:09:11,850
You should see the message still being outputted like before, even though you can name the imported

130
00:09:11,850 --> 00:09:17,220
value, whatever you want, it's common practice to name an after the value that's being exported so

131
00:09:17,220 --> 00:09:18,880
it can be easier to understand.

132
00:09:19,290 --> 00:09:22,120
I'm going to change my values back to hello.

133
00:09:22,740 --> 00:09:26,970
The question is, how do we import specific values from a module?

134
00:09:27,330 --> 00:09:29,740
This is where the structuring comes into play.

135
00:09:30,120 --> 00:09:33,750
I'm going to change my hello to a pair of curly brackets.

136
00:09:34,090 --> 00:09:37,290
What will happen is that JavaScript will return an object.

137
00:09:37,860 --> 00:09:40,770
Each property in that object will be each value.

138
00:09:40,770 --> 00:09:41,620
You export it.

139
00:09:42,300 --> 00:09:45,050
You can use the structuring to grab a certain value.

140
00:09:45,360 --> 00:09:47,450
I want to grab my num value.

141
00:09:47,760 --> 00:09:52,290
What this will do is extract that num value and make it into its own variable.

142
00:09:52,650 --> 00:09:54,930
We can then log this variable like so.

143
00:09:57,330 --> 00:10:00,460
I'm going to run the NPM run start command.

144
00:10:00,810 --> 00:10:02,810
There should be no errors thus far.

145
00:10:03,210 --> 00:10:06,120
The number five should be outputted onto the page.

146
00:10:08,400 --> 00:10:13,920
Let's say I wanted to give my imported value a custom name that's relatively easy.

147
00:10:14,310 --> 00:10:19,040
All you have to do is use the as keyword and then follow it up with a custom name.

148
00:10:19,650 --> 00:10:22,950
Then you can use this custom name throughout your code like.

149
00:10:22,950 --> 00:10:27,120
So I'm not a fan of custom names, so I'm going to remove this.

150
00:10:27,330 --> 00:10:31,590
Let's say I wanted to import both the default value and another value.

151
00:10:31,890 --> 00:10:33,950
There are two ways you can go about this.

152
00:10:34,440 --> 00:10:40,200
The first way is by using the asterisk character and then assigning this to a custom name, using the

153
00:10:40,200 --> 00:10:41,170
as keyword.

154
00:10:41,550 --> 00:10:43,560
I'm going to set this to functions.

155
00:10:45,980 --> 00:10:51,800
What this will do is grab all the export and values and assign them as properties to the functions variable,

156
00:10:52,580 --> 00:10:55,190
you can then access to values by their names like.

157
00:10:55,190 --> 00:11:00,990
So if you want to grab the default value, then that is stored under the default property.

158
00:11:01,400 --> 00:11:05,970
Of course, this does mean you will end up writing more code, which isn't what we want.

159
00:11:06,470 --> 00:11:12,160
The second method of getting the value is to just comma separated right before the restructuring.

160
00:11:12,170 --> 00:11:14,120
I'm going to just add hello.

161
00:11:16,450 --> 00:11:22,540
Keep in mind that by not using these structuring, you won't have the ability to specify what value

162
00:11:22,540 --> 00:11:23,470
you want to use.

163
00:11:23,770 --> 00:11:27,220
So JavaScript will just assign this to the default value.

164
00:11:27,910 --> 00:11:34,030
Now, you can use both the halo function and num variable by themselves without having to access it

165
00:11:34,030 --> 00:11:34,790
from an object.

166
00:11:35,170 --> 00:11:37,210
There are a couple more things I want to cover.

167
00:11:37,880 --> 00:11:40,410
You do not have to export a default value.

168
00:11:40,690 --> 00:11:44,880
You can just export the HALO function without assigning it to the default.

169
00:11:45,370 --> 00:11:47,840
I'm going to get rid of the default keyword.

170
00:11:48,220 --> 00:11:50,260
I cannot simply leave it like this.

171
00:11:50,560 --> 00:11:52,410
I have to set a name and a value.

172
00:11:52,750 --> 00:11:56,680
So I have to move this function into the export statement for this to work.

173
00:12:01,010 --> 00:12:06,650
I'll now have to update my import statement, I have to use the structuring since there is no default

174
00:12:06,650 --> 00:12:07,040
value.

175
00:12:07,550 --> 00:12:08,720
Let's see what happens.

176
00:12:08,720 --> 00:12:15,620
If I were to not use the structuring and try to call the helo function, I'm going to run my NPM run

177
00:12:15,620 --> 00:12:16,490
start command.

178
00:12:18,720 --> 00:12:24,210
Westpac will throw an error or stating that there was no default value in order for this to work, we

179
00:12:24,210 --> 00:12:25,730
have to use these structuring.

180
00:12:26,100 --> 00:12:29,790
I'm going to add my curly brackets back in and run the command again.

181
00:12:34,010 --> 00:12:40,640
Then I'm going to view my page as expected, this will output the message, there are a couple more

182
00:12:40,640 --> 00:12:43,470
things we can go over, but this is just the basics.

183
00:12:43,790 --> 00:12:48,190
I know it can seem overwhelming because you can use this in a number of combinations.

184
00:12:48,440 --> 00:12:54,950
I promise you, we will get a lot of practice using this as it's extremely common to use as six modules

185
00:12:54,950 --> 00:12:56,000
and restructuring.

186
00:12:56,660 --> 00:13:02,540
For the most part, you won't have to worry about using a lot of the trickier parts of modules or restructuring.

187
00:13:03,020 --> 00:13:07,120
We're going to keep it really simple and just export some default values.

188
00:13:07,460 --> 00:13:12,980
The examples I show you are super simple, but I assure you that these features are extremely helpful

189
00:13:12,980 --> 00:13:14,120
in more advanced apps.

190
00:13:14,720 --> 00:13:18,590
For now, let's move on to the next lecture and learn about react.

