1
00:00:07,960 --> 00:00:11,360
We are now going to register our block to get started.

2
00:00:11,410 --> 00:00:18,250
Open your command line and CD into the blocks directory, then run the commands npm run deve.

3
00:00:22,490 --> 00:00:28,970
This should make Westpac look out for any changes once you have that ready, open the index dogs file

4
00:00:28,970 --> 00:00:30,560
inside the AMP directory.

5
00:00:30,800 --> 00:00:36,860
I'm going to empty this file out to register a block will need to include a few things and then call

6
00:00:36,860 --> 00:00:38,620
a function if we want to.

7
00:00:38,720 --> 00:00:40,970
We could write the code inside this file.

8
00:00:41,330 --> 00:00:45,710
However, as you may know by now, I like to keep things organized and structured.

9
00:00:46,310 --> 00:00:49,760
We're going to place every block we create into its own file.

10
00:00:50,060 --> 00:00:53,630
We'll be using the index file as a way to import everything.

11
00:00:53,930 --> 00:00:57,610
This file will look similar to the main plug and file.

12
00:00:57,950 --> 00:01:00,380
It'll just be a lot of import statements.

13
00:01:00,710 --> 00:01:07,700
Inside the AMP directory, create a folder named Recipe Dash Block and inside that directory create

14
00:01:07,700 --> 00:01:09,890
a file named Index J.S..

15
00:01:12,230 --> 00:01:14,040
You don't have to name a likeness.

16
00:01:14,360 --> 00:01:21,260
This is just how I prefer to name things now we'll have to import the index file back inside the main

17
00:01:21,260 --> 00:01:22,100
index file.

18
00:01:22,190 --> 00:01:24,920
I'm going to add a comment that says Main File.

19
00:01:27,140 --> 00:01:33,200
We're going to have a lot of files named Index, so this will help us differentiate between this file

20
00:01:33,200 --> 00:01:39,470
and the other files below this, I'm going to use the import statement and pass in the path to the file.

21
00:01:41,800 --> 00:01:47,440
All right, things are a bit different here previously when we went over module's, I told you there

22
00:01:47,440 --> 00:01:49,410
are various ways to import files.

23
00:01:49,690 --> 00:01:53,160
We're using the S6 method of importing modules.

24
00:01:53,410 --> 00:01:58,470
However, I'm not using the from key word, nor am I storing the data in a variable.

25
00:01:59,050 --> 00:02:04,900
If you were to just call the import statement by itself, then JavaScript will still process the contents

26
00:02:04,900 --> 00:02:07,390
of the file, but it will not return the data.

27
00:02:07,780 --> 00:02:13,040
This means that if you were to export any data from that file, then we won't be able to use it here.

28
00:02:13,300 --> 00:02:14,380
That's perfectly fine.

29
00:02:15,010 --> 00:02:17,800
We don't need to import any data from that file.

30
00:02:18,130 --> 00:02:22,990
The great thing about this is that we'll still have access to all other modules, even though we're

31
00:02:22,990 --> 00:02:26,410
not passing any data from this module to the one being imported.

32
00:02:26,830 --> 00:02:29,080
Another thing I want to note is the file name.

33
00:02:29,200 --> 00:02:33,550
I'm not including the index dogs file name by default.

34
00:02:33,670 --> 00:02:39,250
JavaScript will assume that you want to load a file named Index Jast if you don't specify one.

35
00:02:39,640 --> 00:02:45,130
By organizing our code like this, we can just provide the directory name and JavaScript will take care

36
00:02:45,130 --> 00:02:46,810
of the rest if you want.

37
00:02:46,900 --> 00:02:49,820
You can include the file name if it makes things more readable.

38
00:02:50,440 --> 00:02:54,790
All right, let's shift our focus to the recipe block index file.

39
00:02:55,150 --> 00:02:59,020
WordPress puts everything into a single variable called WP.

40
00:02:59,350 --> 00:03:00,880
Let's log that variable.

41
00:03:04,700 --> 00:03:09,650
Even though we're using weapons in a lot of other modules, keep in mind that we're loading this file

42
00:03:09,650 --> 00:03:15,770
with WordPress, just like any other JavaScript file will have access to any functions or variables

43
00:03:15,770 --> 00:03:17,030
that are defined globally.

44
00:03:17,600 --> 00:03:23,180
Savior changes and refresh the ED, open your developer tools and view the console tab.

45
00:03:23,510 --> 00:03:27,080
If everything worked, then you should see an object being launched.

46
00:03:27,380 --> 00:03:31,820
This object contains a whole lot of other objects that will help us build blocks.

47
00:03:32,390 --> 00:03:36,160
The main object I want you to focus on is the blocks object.

48
00:03:36,560 --> 00:03:38,930
This object contains a list of functions.

49
00:03:38,930 --> 00:03:42,300
We're helping you build your own block that will work with the Gutenberg editor.

50
00:03:42,650 --> 00:03:47,060
Let's go ahead and use this object inside the recipe block.

51
00:03:47,090 --> 00:03:54,410
I'm going to comment about the log, then I'm going to call the WP blocks dot register block type function.

52
00:04:00,820 --> 00:04:03,200
This function will register a block for us.

53
00:04:03,520 --> 00:04:06,280
We just need to pass in a few settings and will be set.

54
00:04:06,700 --> 00:04:10,360
Before we move on to that, let's check out the documentation for this.

55
00:04:10,990 --> 00:04:13,140
Gutenberg is still relatively new.

56
00:04:13,330 --> 00:04:17,399
However, it's probably one of the best documented parts of WordPress.

57
00:04:17,680 --> 00:04:21,880
There are two locations you'll find yourself going through to find more information.

58
00:04:22,510 --> 00:04:26,740
In the resource section of this lecture, I provide links to these resources.

59
00:04:27,040 --> 00:04:29,020
The first resource is the handbook.

60
00:04:29,230 --> 00:04:32,610
The handbook is the developer friendly resource for Gutenberg.

61
00:04:32,980 --> 00:04:35,660
Lots of examples and overviews on the basics.

62
00:04:36,010 --> 00:04:39,400
This is probably where you'll find yourself going as a beginner.

63
00:04:40,060 --> 00:04:44,040
The second resource is the GitHub repository for Gutenberg itself.

64
00:04:44,410 --> 00:04:47,770
Before we dive into this project, I do want to note one thing.

65
00:04:48,130 --> 00:04:53,220
The code you find here and the code inside your WordPress installation are completely different.

66
00:04:53,800 --> 00:04:55,150
The code here is raw.

67
00:04:55,150 --> 00:05:00,400
Without any compilation, you'll find that the file size here is bigger than the one that's loaded with

68
00:05:00,400 --> 00:05:01,090
WordPress.

69
00:05:01,420 --> 00:05:04,330
The code inside WordPress is compressed into minified.

70
00:05:04,630 --> 00:05:07,630
I do not recommend looking at the code inside WordPress.

71
00:05:08,080 --> 00:05:11,410
Instead, I recommend you check out the GitHub repository.

72
00:05:11,770 --> 00:05:18,130
Throughout this course I'll be referring both resources, so be sure to bookmark them both earlier.

73
00:05:18,160 --> 00:05:21,730
If you recall, we logged the WP Global Variable.

74
00:05:22,120 --> 00:05:28,120
A lot of the various objects you found inside that object can be found inside the packages directory

75
00:05:28,120 --> 00:05:29,440
of the Gutenberg plugin.

76
00:05:30,010 --> 00:05:32,500
I'm going to click on the Blocks Directory.

77
00:05:32,770 --> 00:05:37,510
The Blocks Directory contains all the functions you saw inside the blocks object.

78
00:05:37,780 --> 00:05:42,850
Most packages come with their own documentation that you may not be able to find inside the handbook.

79
00:05:43,210 --> 00:05:48,040
Now that we know where the code is for creating blocks, let's examine a block in the editor.

80
00:05:48,580 --> 00:05:52,780
Switching back to the editor, you'll find a plus icon at the top left corner.

81
00:05:53,200 --> 00:05:57,430
Clicking on this will display a list of blocks that come by default with Gutenberg.

82
00:05:57,790 --> 00:06:04,300
Something I want you to notice is that blocks are categorized into things like common formatting, embeds,

83
00:06:04,300 --> 00:06:04,960
etc..

84
00:06:05,530 --> 00:06:10,780
This is important to note as when we are creating blocks will be asked where we'll want to place our

85
00:06:10,780 --> 00:06:11,200
block.

86
00:06:11,500 --> 00:06:15,220
It's always good practice to place your block in an appropriate category.

87
00:06:16,000 --> 00:06:20,920
Back on the GitHub page, you can find the code for these blocks inside the packages.

88
00:06:21,010 --> 00:06:23,110
Slash block, dash library.

89
00:06:23,650 --> 00:06:24,670
Source directory.

90
00:06:26,800 --> 00:06:32,710
After you finish this course, I recommend you check out the Kahir to see how WordPress goes about creating

91
00:06:32,710 --> 00:06:33,650
their own blocks.

92
00:06:34,210 --> 00:06:35,820
Let's check one out really quickly.

93
00:06:36,010 --> 00:06:42,580
I'm going to select the audio block the general architecture where press goes for here is an index file

94
00:06:42,580 --> 00:06:44,800
and then some X files.

95
00:06:45,100 --> 00:06:47,770
I don't expect you to know what success is.

96
00:06:47,990 --> 00:06:50,680
It's just another file type facetiousness.

97
00:06:51,010 --> 00:06:54,070
I'll be briefly going over it later on in this course.

98
00:06:54,070 --> 00:06:55,550
But for now, you can ignore it.

99
00:06:56,200 --> 00:06:59,540
Let's check out the index file inside this file.

100
00:06:59,560 --> 00:07:04,780
You'll find that WordPress import some variables which will also be using in our own blocks.

101
00:07:05,080 --> 00:07:07,780
Then it proceeds to create some settings.

102
00:07:08,080 --> 00:07:10,390
We'll be exploring this more in depth later.

103
00:07:10,420 --> 00:07:14,530
But for now, I just want to give you a general idea of what we'll be writing.

104
00:07:15,340 --> 00:07:17,380
Let's go back to the Blocks directory.

105
00:07:19,470 --> 00:07:23,490
Most victories here come with a file named README MRG.

106
00:07:23,940 --> 00:07:26,880
These files provide more information about a project.

107
00:07:27,330 --> 00:07:32,310
The great thing about GitHub is that it will automatically render any README files below.

108
00:07:33,060 --> 00:07:35,950
Let's scroll down to the API section here.

109
00:07:35,970 --> 00:07:40,020
You'll find a list of functions you can use in your own code right away.

110
00:07:40,030 --> 00:07:42,600
You'll see the register block type function.

111
00:07:43,020 --> 00:07:45,480
There are two parameters which are both required.

112
00:07:45,810 --> 00:07:49,710
The first is the name and the second is an object filled with the settings.

113
00:07:50,070 --> 00:07:51,610
Before we fill in the settings.

114
00:07:51,660 --> 00:07:53,970
There's one more thing I want you to be aware of.

115
00:07:54,600 --> 00:07:59,340
I know I'm rambling here, but knowing how to navigate your way around will help you later on.

116
00:07:59,340 --> 00:08:04,550
If you want to build advanced blocks scrolling back up, click on the API directory.

117
00:08:05,220 --> 00:08:11,130
The API directory contains code related to how you can interact with the blocks of WordPress.

118
00:08:11,580 --> 00:08:14,100
There should be a file here called registration.

119
00:08:15,660 --> 00:08:18,900
This is the file that contains the register block type function.

120
00:08:19,170 --> 00:08:24,090
If you take a close look at this function, you'll find that it performs a lot of conditional checks

121
00:08:24,090 --> 00:08:24,930
on your statements.

122
00:08:25,200 --> 00:08:27,990
If it finds something wrong, then it'll throw an error.

123
00:08:28,560 --> 00:08:33,210
One error I want to highlight in particular is this one that checks for the block name.

124
00:08:33,510 --> 00:08:40,679
It says the following block names must contain a namespace prefix, include only lowercase alphanumeric

125
00:08:40,679 --> 00:08:42,059
characters or dashes.

126
00:08:42,059 --> 00:08:44,220
And start with a letter example.

127
00:08:44,400 --> 00:08:47,970
My dash plug in my dash custom dash block.

128
00:08:48,480 --> 00:08:51,940
I wanted to highlight this as will be using this function very soon.

129
00:08:52,350 --> 00:08:54,470
Let's go back to the Blocks directory.

130
00:08:54,930 --> 00:09:00,870
To recap, the API directory contains the functions for interacting with this part of Gutenberg, which

131
00:09:00,870 --> 00:09:06,710
are blocks the Block National Library directory contains all the default blocks for Gutenberg.

132
00:09:07,110 --> 00:09:11,490
The rest of the packages are components that we can use to help build our own blocks.

133
00:09:11,790 --> 00:09:15,150
You'll soon understand what that means as the course progresses.

134
00:09:15,690 --> 00:09:19,170
Now that we have an overview of things, let's start using this function.

135
00:09:19,500 --> 00:09:21,300
The first parameter is the name.

136
00:09:21,630 --> 00:09:25,980
The name needs to be formatted as the namespace, followed by the name of the block.

137
00:09:26,580 --> 00:09:30,000
For the rest of this course will be using the namespace udemy.

138
00:09:30,240 --> 00:09:33,390
The name of this block will be Udemy recipe.

139
00:09:35,620 --> 00:09:41,540
The second parameter for this function is the settings you must pass this in as an object.

140
00:09:41,800 --> 00:09:43,330
We're going to stop here for now.

141
00:09:43,570 --> 00:09:45,410
This is how you register a block.

142
00:09:45,690 --> 00:09:51,340
Unfortunately, this will not work as Gutenberg will throw an error because we need to set a few settings.

143
00:09:54,680 --> 00:10:01,100
So far, we've gone over how to prepare the environment into the files and register of luck, the next

144
00:10:01,100 --> 00:10:02,710
step is to add some settings.

145
00:10:03,080 --> 00:10:05,390
We'll be going over that in the next lecture.

