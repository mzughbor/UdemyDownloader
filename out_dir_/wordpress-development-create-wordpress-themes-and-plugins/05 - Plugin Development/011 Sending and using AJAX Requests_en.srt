1
00:00:07,710 --> 00:00:13,380
Will be using a plug in and called Jake Query, rate it, I provide a link to this plug in the resources

2
00:00:13,380 --> 00:00:14,600
section of this lecture.

3
00:00:14,910 --> 00:00:18,630
It'll create a simple rating UI that we can use in our plug in.

4
00:00:18,990 --> 00:00:23,680
I already included this plug in for you when you downloaded the assets for our project.

5
00:00:24,270 --> 00:00:26,070
All we have to do now is include it.

6
00:00:26,430 --> 00:00:31,770
You already know how to do this, so why don't you pause this video and give it a try this plug and

7
00:00:31,770 --> 00:00:34,340
it can be found inside the assets folder.

8
00:00:34,740 --> 00:00:42,600
All you need to do is include the query rated DOT men that James and rated dot xxx files.

9
00:00:45,210 --> 00:00:51,750
If you haven't figured it out yet, then let me show you, I'm going to use the WP and Scripps Action

10
00:00:51,750 --> 00:00:55,080
Hook and I'm going to call the function R and Q scripts.

11
00:00:59,310 --> 00:01:06,720
The next step is to create the file that will include our files, create a file named NQ Up that will

12
00:01:06,720 --> 00:01:09,840
contain our function and include it from within the plug and file.

13
00:01:16,110 --> 00:01:22,140
Keep in mind that I created a folder named Front and put the file in here, one last thing I want to

14
00:01:22,140 --> 00:01:25,740
do is set the priority to a high number such as one hundred.

15
00:01:26,190 --> 00:01:31,090
This here is a personal preference whenever I'm in files from within a plugin file.

16
00:01:31,110 --> 00:01:33,260
I like to load my assets last.

17
00:01:33,810 --> 00:01:38,580
This is because I believe theme should have a higher priority when it comes to loading JavaScript and

18
00:01:38,580 --> 00:01:39,610
access files.

19
00:01:39,990 --> 00:01:44,940
I've had many problems in the past where my assets had conflicting issues with the theme because the

20
00:01:44,940 --> 00:01:46,690
theme files were being loaded too late.

21
00:01:47,220 --> 00:01:51,870
I've saved myself many headaches by having my plug ins asset files loaded last.

22
00:01:57,140 --> 00:01:58,770
Now, let's take a look at this function.

23
00:01:59,240 --> 00:02:02,630
I'm simply going to register and in queue my files.

24
00:02:03,680 --> 00:02:08,820
One thing I forgot to mention is that I'm also interviewing a script named Maned James.

25
00:02:09,229 --> 00:02:12,990
This file can be found inside the assets logs folder.

26
00:02:13,640 --> 00:02:14,570
Open this file.

27
00:02:15,880 --> 00:02:21,170
It's just basic jury code, which we will be editing soon back to the NQ function.

28
00:02:21,190 --> 00:02:26,170
I'm doing one last thing, which is making sure that Jake query is being loaded before our files are

29
00:02:26,170 --> 00:02:26,480
loaded.

30
00:02:27,010 --> 00:02:32,170
This should set everything up and we can now begin using the plug in the resource section.

31
00:02:32,200 --> 00:02:35,860
I provide a link to the Ajax in Plugins Codex Page.

32
00:02:36,220 --> 00:02:42,670
This page goes over how to use Ajax and plugins using Ajax on the front end requires a little work.

33
00:02:42,820 --> 00:02:47,470
The first thing we need to do is prepare the data, open the recipe template file.

34
00:02:47,740 --> 00:02:51,550
As you can see, the rating is placed right after the rating text.

35
00:02:51,910 --> 00:02:55,110
We created this div with the class ratings.

36
00:02:55,540 --> 00:02:59,320
I also gave it an ID called Recipe Underscore Rating.

37
00:02:59,740 --> 00:03:01,300
We'll need this as a reference.

38
00:03:01,450 --> 00:03:07,770
I also added this attribute called data dash rate it dasht reasonable and set its value to false.

39
00:03:08,440 --> 00:03:12,670
This plugin will generate a button that will allow the user to reset the rating.

40
00:03:13,060 --> 00:03:15,840
We don't want this by setting it to false.

41
00:03:15,880 --> 00:03:18,520
This will prevent the user from resetting the rating.

42
00:03:19,360 --> 00:03:22,930
All this information can be found on the documentation page of the plug in.

43
00:03:23,410 --> 00:03:27,640
The last attribute I created is called Data Dash or ID.

44
00:03:28,060 --> 00:03:32,270
This will contain the ID of the current post taking a close look.

45
00:03:32,320 --> 00:03:36,600
You'll notice I made this into a placeholder inside the filter function.

46
00:03:36,610 --> 00:03:38,560
Let's add another modification.

47
00:03:39,040 --> 00:03:43,930
All you need to do is search for this placeholder and replace it with the idea of this post.

48
00:03:51,650 --> 00:03:56,580
Let's test this really quick, you should see five stars and be able to rate this recipe.

49
00:03:57,020 --> 00:03:58,760
This works almost perfect.

50
00:03:58,970 --> 00:04:01,770
As you can see, you're able to change your rating.

51
00:04:02,000 --> 00:04:03,160
We don't want this.

52
00:04:03,440 --> 00:04:06,500
We want the rating to be set after the user has done so.

53
00:04:07,130 --> 00:04:10,020
We'll do this inside the JavaScript main file.

54
00:04:10,280 --> 00:04:16,399
I'm going to select the div by its ID and then I'm going to bind an event called Rated.

55
00:04:21,670 --> 00:04:27,970
This event is called When the user rates a recipe inside the function, we can use the this object to

56
00:04:27,970 --> 00:04:29,110
reference the div.

57
00:04:29,560 --> 00:04:33,460
I'm going to select the div again and call the rate method.

58
00:04:35,620 --> 00:04:42,040
This method allows us to change the properties, I'm going to change the Reed only property to true,

59
00:04:42,640 --> 00:04:46,460
this will prevent the user from changing the rating after reading a recipe.

60
00:04:46,930 --> 00:04:50,120
The next step is to create an object called form.

61
00:04:50,620 --> 00:04:53,980
We're going to send this object when we make an AJAX request.

62
00:04:54,310 --> 00:04:58,240
There's only one property we must define, which is the action property.

63
00:04:58,720 --> 00:05:03,990
WordPress will use this to determine what function to execute when it receives an Ajax request.

64
00:05:04,480 --> 00:05:07,180
You'll see exactly how this works in just a moment.

65
00:05:07,820 --> 00:05:10,840
I'm going to set this to our great recipe.

66
00:05:12,930 --> 00:05:18,930
Next, I'm going to create a pride property and set its value to the pride attribute.

67
00:05:22,780 --> 00:05:28,920
The last property you want to define is the rating itself to grab the rating, we can use the rate it

68
00:05:28,930 --> 00:05:30,480
method and pass and value.

69
00:05:30,760 --> 00:05:32,170
This will return the rating.

70
00:05:35,400 --> 00:05:39,520
I want to test this out now, refresh the page and try reading the recipe.

71
00:05:39,810 --> 00:05:43,290
You should not be able to rate this recipe after reading it once.

72
00:05:43,650 --> 00:05:48,470
The next step is to send an Ajax request with all our info so the rating can be saved.

73
00:05:49,170 --> 00:05:55,010
The WordPress admin provides a variable for the Ajax URL on the front end were not so lucky.

74
00:05:55,200 --> 00:05:57,570
We have to generate the URL ourselves.

75
00:05:57,690 --> 00:05:58,710
It's pretty easy though.

76
00:05:59,340 --> 00:06:04,710
Inside the NQ function we're going to use a function called WP Localize script.

77
00:06:08,880 --> 00:06:15,420
This function is used for providing translated strings to your JavaScript files, despite this, WordPress

78
00:06:15,420 --> 00:06:20,620
recommends you use this function for also providing a new URL to its Ajax page handler.

79
00:06:21,300 --> 00:06:25,560
The first parameter is which file will be receiving the translations.

80
00:06:26,020 --> 00:06:31,950
You or else set this to our since this is the file that we're using to send AJAX requests.

81
00:06:32,520 --> 00:06:36,540
Next up is the name of the object we can use for referencing the values.

82
00:06:36,840 --> 00:06:39,560
I'm going to set this to recipe obj.

83
00:06:39,990 --> 00:06:42,300
The last parameter is an array of values.

84
00:06:42,510 --> 00:06:46,530
We only need to create one value and that is the Ajax U URL.

85
00:06:48,400 --> 00:06:49,880
You can name this whatever you want.

86
00:06:49,900 --> 00:06:55,750
By the way, the value of this key will be the euro returned by the admin euro function.

87
00:06:59,030 --> 00:07:04,400
This function has one optional parameter, which is the path relative to the WordPress admin, you,

88
00:07:04,400 --> 00:07:08,450
Earl, I'm going to pass in admin dash Ajax Dot.

89
00:07:11,410 --> 00:07:18,070
This is the path that should always handle your Ajax requests, if we take a look at our folder structure,

90
00:07:18,160 --> 00:07:21,740
you can find this file inside the WP dash admin folder.

91
00:07:22,330 --> 00:07:26,350
Now we can send in Ajax request using GE queries.

92
00:07:26,350 --> 00:07:31,000
Post Method will send an Ajax request to the URL we generated.

93
00:07:34,760 --> 00:07:41,660
Remember the recipe, LBJ is the name we used in the second parameter of the localized function, this

94
00:07:41,660 --> 00:07:44,210
object will contain all our raised value.

95
00:07:44,540 --> 00:07:47,720
The property we want to access is the Ajax.

96
00:07:47,720 --> 00:07:48,750
You are our property.

97
00:07:49,430 --> 00:07:54,950
Next, we want to send the form object and then we'll create the function that will handle the response.

98
00:07:55,340 --> 00:07:59,260
The data argument is a variable that will contain the response body.

99
00:07:59,780 --> 00:08:05,600
The last thing we need to do is to tell WordPress about this Ajax request so we can handle it properly

100
00:08:06,200 --> 00:08:07,470
from the plugin file.

101
00:08:07,520 --> 00:08:10,880
We're going to use an action hook called WP Ajax.

102
00:08:16,890 --> 00:08:22,050
Let's take a look at this hook by viewing its Codex page, I provided a link to this in the resource

103
00:08:22,050 --> 00:08:23,250
section of this lecture.

104
00:08:23,970 --> 00:08:27,950
This book starts with Ajax, followed by the name of the action.

105
00:08:28,290 --> 00:08:30,510
This was set in the form object.

106
00:08:30,840 --> 00:08:33,210
The action hook should be called WP.

107
00:08:33,210 --> 00:08:34,500
Underscore Ajax.

108
00:08:34,500 --> 00:08:36,539
Underscore our underscore rate.

109
00:08:36,539 --> 00:08:37,559
Underscore recipe.

110
00:08:40,049 --> 00:08:43,860
The name of the function we want to execute is our recipe.

111
00:08:46,100 --> 00:08:47,750
You can name this whatever you want.

112
00:08:48,020 --> 00:08:53,030
You don't have to name it after the action, I just do it like this because it makes things easier to

113
00:08:53,030 --> 00:08:53,520
manage.

114
00:08:54,110 --> 00:08:54,620
All right.

115
00:08:54,980 --> 00:09:02,060
Now create a file inside the process folder called Rate Dash Recipe B and define the function here.

116
00:09:02,540 --> 00:09:04,700
Make sure to include it from the plugin file.

117
00:09:11,980 --> 00:09:15,190
Inside the function, I'm going to output the post data.

118
00:09:17,570 --> 00:09:23,630
Let's try using our rating system now, there's one problem, which is how do we know if our data is

119
00:09:23,630 --> 00:09:26,180
being sent and how do we check the data?

120
00:09:26,690 --> 00:09:32,540
This can be done by using chrome developer tools, press F 12 on your keyboard and you should see this

121
00:09:32,540 --> 00:09:32,990
pop up.

122
00:09:33,620 --> 00:09:40,970
In previous lectures, we briefly went over how the elements and console tabs work now will be discussing

123
00:09:40,970 --> 00:09:47,660
how the network tab works, the network tab tracks of what files are loaded and how long it takes to

124
00:09:47,660 --> 00:09:48,580
load those files.

125
00:09:48,980 --> 00:09:52,610
It also provides information about the request and responses.

126
00:09:53,150 --> 00:09:56,830
For the most part, I don't usually concern myself with all this information.

127
00:09:57,200 --> 00:10:01,730
The best part about the section of the developer tools is that you can filter those requests.

128
00:10:01,730 --> 00:10:08,210
Since a web page can make dozens of requests, I'm going to filter it by X HRR, which stands, for

129
00:10:08,210 --> 00:10:10,400
example, HTTP requests.

130
00:10:10,820 --> 00:10:13,460
This is where AJAX requests are being displayed.

131
00:10:14,210 --> 00:10:16,790
With this being displayed, I'm going to rate the recipe.

132
00:10:17,090 --> 00:10:22,400
After reading the recipe, you should see a new request being sent to admin dash AIJAC Stop.

133
00:10:23,510 --> 00:10:27,430
Click on this request and you will see some data being outputted to the right.

134
00:10:27,890 --> 00:10:30,110
It's categorized into five sections.

135
00:10:30,320 --> 00:10:35,270
The headers tab tells us about the header information inside this tab.

136
00:10:35,270 --> 00:10:37,010
It's split into more sections.

137
00:10:37,310 --> 00:10:40,580
The general section provides information about the request.

138
00:10:40,580 --> 00:10:45,200
In general, the response headers provides information about the server itself.

139
00:10:45,200 --> 00:10:51,440
When it replied to our request, the request headers provides information about our own request.

140
00:10:51,800 --> 00:10:54,140
The form data is what we want to see.

141
00:10:54,140 --> 00:11:00,320
Specifically, you'll notice our data being sent so we can now confirm that our request is indeed being

142
00:11:00,320 --> 00:11:02,090
sent with the data we provided.

143
00:11:02,900 --> 00:11:09,740
Next, I want to check if the server is receiving this data properly under the preview or response tab

144
00:11:09,740 --> 00:11:12,110
will be able to check out the service response.

145
00:11:12,620 --> 00:11:15,220
We see our data being outputted with Pete.

146
00:11:15,650 --> 00:11:21,260
Not only have we confirmed that our data is being sent, but the correct function is being executed

147
00:11:21,260 --> 00:11:22,640
when our data is received.

148
00:11:23,330 --> 00:11:26,090
Before I move on, there's one thing I want to highlight.

149
00:11:26,360 --> 00:11:32,480
The difference between the preview and response tab is that the preview tab will display the response

150
00:11:32,480 --> 00:11:34,930
as if the response was rendered by a browser.

151
00:11:35,450 --> 00:11:40,250
So any stylings applied to the responses page will be applied to this little preview.

152
00:11:40,760 --> 00:11:45,470
The response tab will show the response completely raw and or plain text.

153
00:11:46,160 --> 00:11:49,700
There is one last thing I want to do before we move on to processing the rating.

154
00:11:50,120 --> 00:11:56,360
Back inside the main plugin file, I'm going to copy the Ajax Hook again and paste it below.

155
00:11:58,550 --> 00:12:03,500
I'm going to change Ajax to Ajax, no priv.

156
00:12:05,710 --> 00:12:11,650
The difference between these two is that they know PRIV version will also process Ajax requests from

157
00:12:11,650 --> 00:12:13,090
users who are not logged in.

158
00:12:13,540 --> 00:12:15,830
No priv stands for no privileges.

159
00:12:16,420 --> 00:12:19,900
We want our guests to be able to rate our recipes as well.

160
00:12:20,350 --> 00:12:22,420
This step is optional and is up to you.

161
00:12:22,420 --> 00:12:27,850
Whether you believe guests should be able to make Ajax requests, you don't have to worry about both

162
00:12:27,850 --> 00:12:32,920
of these being triggered as WordPress is smart enough to tell which one to use depending on the user,

163
00:12:33,580 --> 00:12:37,060
and the next lecture will begin processing the data and save it.

