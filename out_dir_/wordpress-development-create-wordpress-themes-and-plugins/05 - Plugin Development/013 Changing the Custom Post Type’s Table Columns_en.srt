1
00:00:07,740 --> 00:00:13,500
I'm back inside the admin side of WordPress and I'm on the recipe page right now, there's no way for

2
00:00:13,500 --> 00:00:18,300
me to know how many ratings each recipe has or what the rating for each one is.

3
00:00:18,750 --> 00:00:22,500
Wouldn't it be nice if I could see all the data here in this table?

4
00:00:22,860 --> 00:00:23,610
At this point?

5
00:00:23,710 --> 00:00:25,680
You can already guess how we would do this.

6
00:00:25,800 --> 00:00:31,410
If you were thinking action hoax, then you were correct along with showing the rating count and the

7
00:00:31,410 --> 00:00:32,299
actual rating.

8
00:00:32,340 --> 00:00:38,580
We're also going to remove the tags column as it's kind of useless information for this post to get

9
00:00:38,580 --> 00:00:39,130
started.

10
00:00:39,180 --> 00:00:45,090
We're going to look into when the WordPress admin dashboard is initialized inside the main plug and

11
00:00:45,090 --> 00:00:48,150
file at an action hook called admin in.

12
00:00:48,150 --> 00:00:52,200
It's the name of the function will be recipe admin in it.

13
00:00:54,590 --> 00:01:00,830
This function doesn't exist, so let's create it inside the includes folder, create a folder named

14
00:01:00,830 --> 00:01:01,400
admin.

15
00:01:01,700 --> 00:01:05,990
This is where we'll store files related to the admin site exclusively.

16
00:01:06,380 --> 00:01:13,100
Then inside this folder, create a file named in it to find the function and include it from the main

17
00:01:13,100 --> 00:01:13,790
plug and file.

18
00:01:21,400 --> 00:01:27,820
Inside this function, I'm going to add a new filter hook called managed post type posts columns.

19
00:01:33,110 --> 00:01:37,140
This hook doesn't have to be used inside the admin in it hook.

20
00:01:37,490 --> 00:01:40,620
The reason we're adding it here is to keep things organized.

21
00:01:40,850 --> 00:01:46,160
I could have very well put this hook inside the main plug and file, but I don't want that file to be

22
00:01:46,160 --> 00:01:47,450
too cluttered with hooks.

23
00:01:48,200 --> 00:01:53,750
There's also the advantage of having all the admin hooks in one file rather than mixing them together

24
00:01:53,750 --> 00:01:54,620
with other hooks.

25
00:01:54,980 --> 00:01:58,970
I provide a link to this and the resource section to more about this hook.

26
00:01:59,390 --> 00:02:01,490
Let's take a look at the Codex page.

27
00:02:01,790 --> 00:02:07,850
The Post type in the name can actually be replaced with the name of the post type where the column will

28
00:02:07,850 --> 00:02:08,530
be updated.

29
00:02:09,020 --> 00:02:14,750
So let's go back to the filter hook and replace this word with recipe, since that is the name of our

30
00:02:14,750 --> 00:02:15,310
post type.

31
00:02:17,570 --> 00:02:23,690
This filter hook will give us an array of columns already set by WordPress, we have the option of returning

32
00:02:23,690 --> 00:02:27,660
a modified version of this array or a brand new array of columns.

33
00:02:28,160 --> 00:02:32,810
Let's set this filter Hooke's function to our add new recipe columns.

34
00:02:34,980 --> 00:02:41,980
I'm going to create a file called columns with the admin folder and define the function here.

35
00:02:42,510 --> 00:02:45,510
Make sure to include it from the admin init function.

36
00:02:51,810 --> 00:02:57,750
This function will be passed a column zarei, we're not going to use this, though, instead I'm going

37
00:02:57,750 --> 00:03:00,180
to create an array called new columns.

38
00:03:02,470 --> 00:03:07,690
The key of these arrays will be used to identify each column and the values will be the names of each

39
00:03:07,690 --> 00:03:08,090
column.

40
00:03:08,530 --> 00:03:11,820
This will be outputted into the header and footer of our table.

41
00:03:12,490 --> 00:03:17,020
If we take a look at the Codex page, WordPress provides a list of default columns.

42
00:03:17,020 --> 00:03:21,640
We can say, I'm going to use all of these except the tags and comments column.

43
00:03:23,750 --> 00:03:25,860
You should have something similar to what I have.

44
00:03:26,180 --> 00:03:33,290
You'll also notice that I'm making each column name translatable right after the categories column and

45
00:03:33,290 --> 00:03:35,600
two more columns called Count and Rating.

46
00:03:35,990 --> 00:03:39,310
When it comes to custom columns, you can name these whatever you want.

47
00:03:39,530 --> 00:03:40,880
I'm going to keep it simple.

48
00:03:41,150 --> 00:03:43,870
These column names will also be translatable.

49
00:03:44,540 --> 00:03:47,150
The last step is return the new columns.

50
00:03:47,330 --> 00:03:53,540
Since these are custom columns, it is our responsibility to output the data for each column back inside

51
00:03:53,540 --> 00:03:55,160
the admin init function.

52
00:03:55,250 --> 00:04:00,530
We will now add an action hook called Managed Post Type Post Custom Column.

53
00:04:08,100 --> 00:04:14,040
I provided a link and the resources section for this action hook, this hook will allow us to output

54
00:04:14,040 --> 00:04:15,390
info for each column.

55
00:04:15,840 --> 00:04:20,070
The post type keyword should be replaced with a custom post type.

56
00:04:20,070 --> 00:04:21,120
This hook will affect.

57
00:04:21,390 --> 00:04:23,390
In our case, it would be recipe.

58
00:04:23,850 --> 00:04:27,540
The function we want to call is our managed recipe columns.

59
00:04:33,470 --> 00:04:36,810
This hook will pass our function to arguments that we'll need.

60
00:04:37,190 --> 00:04:44,000
I'm going to set the priority to 10 and the accepted arguments to two, I'm going to define this function

61
00:04:44,000 --> 00:04:46,340
inside the columns page file.

62
00:04:48,530 --> 00:04:56,210
The two variables that will be passed in our column and posted the column variable is equal to the key

63
00:04:56,210 --> 00:05:00,080
in the columns array and the ID is the idea of the current post.

64
00:05:00,660 --> 00:05:03,050
I'm going to use a switch statement here.

65
00:05:03,360 --> 00:05:08,720
I'm going to check the column and see if its value is equal to either count orating.

66
00:05:16,990 --> 00:05:19,820
Otherwise, I'm just going to break the statement.

67
00:05:20,230 --> 00:05:25,330
Don't worry about the other columns, since they are WordPress columns, WordPress will handle setting

68
00:05:25,330 --> 00:05:26,050
those values.

69
00:05:26,710 --> 00:05:30,860
It's our custom columns we need to worry about for both of these columns.

70
00:05:30,880 --> 00:05:36,310
I'm going to grab the recipe metadata and simply echo the corresponding values for each column.

71
00:05:49,410 --> 00:05:54,900
Something I want to highlight is that I'm checking if the key in the array is set for each of the respective

72
00:05:54,900 --> 00:05:55,410
columns.

73
00:05:55,860 --> 00:05:58,770
This is just in case the metadata isn't available.

74
00:05:59,400 --> 00:06:02,390
Refresher table and you should now see our columns appear.

75
00:06:02,700 --> 00:06:07,980
We only have one recipe, but we can already see the amount of ratings it's received and the average

76
00:06:07,980 --> 00:06:08,370
rating.

