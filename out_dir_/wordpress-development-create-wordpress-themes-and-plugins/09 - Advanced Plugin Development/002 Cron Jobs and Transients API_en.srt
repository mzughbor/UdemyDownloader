1
00:00:07,270 --> 00:00:12,100
Cron jobs can be a confusing concept to beginner developers out there, but it's quite simple.

2
00:00:12,220 --> 00:00:16,100
A cron job is a task or script that is performed at a certain time.

3
00:00:16,450 --> 00:00:20,520
This can be performed once daily, monthly or even every hour.

4
00:00:20,650 --> 00:00:21,440
It's up to you.

5
00:00:21,760 --> 00:00:24,040
Basically, it's an automated task.

6
00:00:24,200 --> 00:00:26,710
A lot of servers come with cron jobs built in.

7
00:00:26,980 --> 00:00:31,810
All you have to do is tell the server what script to execute and when to execute it.

8
00:00:32,409 --> 00:00:35,410
WordPress has a cron job task manager builtin.

9
00:00:35,800 --> 00:00:38,570
We want to set up a con job that will run once a day.

10
00:00:39,010 --> 00:00:43,060
This cron job will pick a random recipe and use it as the recipe of the day.

11
00:00:45,360 --> 00:00:50,970
We're going to schedule our current job in the activation file, open that file and at the bottom of

12
00:00:50,970 --> 00:00:54,360
the function, call WPE schedule, event function.

13
00:00:56,560 --> 00:01:01,840
I'll provide a link and the resource section of this lecture for this function, this function has three

14
00:01:01,840 --> 00:01:02,570
parameters.

15
00:01:02,830 --> 00:01:05,670
The first parameter is the first time this event will occur.

16
00:01:06,010 --> 00:01:09,340
We want to run this right away, so will pass in the current time.

17
00:01:11,530 --> 00:01:17,860
The second parameter is the recurrence, when will this function run again, we are given three recurrence

18
00:01:17,860 --> 00:01:21,070
options hourly, twice, daily and daily.

19
00:01:21,220 --> 00:01:22,360
We want daily.

20
00:01:22,600 --> 00:01:27,000
You can set up your own custom recurrence, but we won't be covering that in this lecture.

21
00:01:27,490 --> 00:01:29,950
The last parameter is the hook that will be triggered.

22
00:01:30,190 --> 00:01:32,560
Notice that I say hook and not function.

23
00:01:32,860 --> 00:01:37,570
WordPress will create a custom action hook for you that you can then hook into yourself.

24
00:01:37,870 --> 00:01:40,550
Other plugins can also hook into this event as well.

25
00:01:40,810 --> 00:01:43,690
I'm going to call this hook our daily recipe hook.

26
00:01:45,920 --> 00:01:52,460
WordPress will schedule this cron job upon activating the plugin, however, I do not want you to deactivate

27
00:01:52,460 --> 00:01:58,610
and reactivate the plugin just yet, we can now use this hook like any other action hook inside the

28
00:01:58,610 --> 00:01:59,360
plugin file.

29
00:01:59,450 --> 00:02:04,220
Add our new custom hook and the function will call is our generate daily recipe.

30
00:02:09,009 --> 00:02:14,440
This hook is triggered once daily, WordPress will take care of checking the time and calling this hook

31
00:02:14,440 --> 00:02:14,880
for you.

32
00:02:15,430 --> 00:02:19,850
Next, let's create a file inside the includes folder and call it Kronborg.

33
00:02:20,920 --> 00:02:22,240
Define the function here.

34
00:02:24,680 --> 00:02:27,050
Include this file from the main plug and file.

35
00:02:31,450 --> 00:02:36,820
This function will run once a day at the beginning of the day, WordPress cron jobs aren't perfect.

36
00:02:37,060 --> 00:02:42,670
Unlike regular cron jobs, WordPress cron jobs won't run exactly at the same time every day.

37
00:02:43,000 --> 00:02:47,090
WordPress depends on a user visiting the site to check for schedule events.

38
00:02:47,470 --> 00:02:51,620
For example, our cron job will run once a day at the beginning of the day.

39
00:02:51,940 --> 00:02:54,910
Let's say we don't get any traffic at the beginning of the day.

40
00:02:55,150 --> 00:03:00,190
If the first visit is four hours after the beginning of the day, then our current job will run at that

41
00:03:00,190 --> 00:03:00,580
time.

42
00:03:00,940 --> 00:03:02,560
This is very important to know.

43
00:03:02,830 --> 00:03:06,210
WordPress cron jobs are not actual Unix jobs.

44
00:03:06,730 --> 00:03:07,660
We're almost done.

45
00:03:07,780 --> 00:03:10,570
Cron jobs are managed by you, the developer.

46
00:03:10,780 --> 00:03:14,230
So it's important to know how to manage all your current jobs.

47
00:03:14,500 --> 00:03:17,340
Too many cron jobs can lead to slow performance.

48
00:03:17,800 --> 00:03:22,660
If we were to uninstall or deactivate the plug in, our CRONSHAW would still be active.

49
00:03:22,900 --> 00:03:25,420
WordPress does not deactivate cron jobs.

50
00:03:25,420 --> 00:03:27,280
Even if your plugin is inactive.

51
00:03:27,520 --> 00:03:31,060
We have to unscheduled this cron job upon deactivations.

52
00:03:31,660 --> 00:03:34,780
There's a special hook called Register Deactivations Hook.

53
00:03:39,790 --> 00:03:45,700
It works just like it's opposite activation hook we have to pass in the main plug and file, followed

54
00:03:45,700 --> 00:03:51,910
by the name of the function to call upon the activation, the function will be called R deactivate plug

55
00:03:51,910 --> 00:03:52,090
in.

56
00:03:54,320 --> 00:03:59,060
Let's create a file called Deactivates B inside the includes folder.

57
00:04:01,410 --> 00:04:06,240
This will contain the deactivations plugin, include this file from the main plugin file.

58
00:04:10,970 --> 00:04:15,950
To unscheduled an event we need to use the WP clear scheduled hook function.

59
00:04:18,279 --> 00:04:23,980
This function has one parameter, which is the name of the hook in our case, this would be our daily

60
00:04:23,980 --> 00:04:24,790
recipe hook.

61
00:04:28,640 --> 00:04:34,520
That's it, we can now safely deactivate and reactivate our plug in, knowing that will only have one

62
00:04:34,520 --> 00:04:40,880
cron job running at a time, we can now begin generating a random recipe of the day to accomplish.

63
00:04:40,880 --> 00:04:44,480
This task will begin by using the transience API.

64
00:04:46,310 --> 00:04:52,640
The transience API is an API that allows us to store data for a certain amount of time, you can think

65
00:04:52,640 --> 00:04:58,320
of this as a cookie or session, except the data is meant for the server and not the client.

66
00:04:58,610 --> 00:05:05,480
It's exactly like the options API, but with an expiration date by default, the transience API will

67
00:05:05,480 --> 00:05:07,130
store the data in the database.

68
00:05:07,340 --> 00:05:11,770
To be specific, it'll store the data inside BWP Options Table.

69
00:05:12,170 --> 00:05:16,350
The purpose of the transience API is to have your data readily available.

70
00:05:16,670 --> 00:05:18,200
This can increase performance.

71
00:05:18,710 --> 00:05:20,210
However, here's the problem.

72
00:05:20,480 --> 00:05:25,460
Since the data is stored in the database, then the response times will be similar if you didn't use

73
00:05:25,460 --> 00:05:26,840
the transience API.

74
00:05:27,440 --> 00:05:32,270
The great thing about the transience API is that a lot of its functionality can be overwritten.

75
00:05:32,600 --> 00:05:37,330
We won't be exploring how to do that because that kind of stuff is handled by other plugins.

76
00:05:37,670 --> 00:05:43,130
Ninety nine percent of the time you'll be working on a site that has a cache plugin installed or you'll

77
00:05:43,130 --> 00:05:44,630
end up installing one anyway.

78
00:05:45,020 --> 00:05:49,550
Most cache plug ins or at least the better ones will overwrite its functionality.

79
00:05:49,880 --> 00:05:53,720
Rather than saving your data in the database, it'll save the data in memory.

80
00:05:54,020 --> 00:05:58,160
Data stored in memory can be retrieved faster, therefore increase performance.

81
00:05:58,730 --> 00:06:02,520
The problem with storing data in memory is that the data is not persistent.

82
00:06:02,810 --> 00:06:07,790
That means that if the server was to unexpectedly shut down, then any data would be lost.

83
00:06:08,030 --> 00:06:11,300
You shouldn't store any important or sensitive data in memory.

84
00:06:11,660 --> 00:06:15,350
For our case, storing the recipe of the day will work just fine.

85
00:06:15,710 --> 00:06:20,300
Even if the data gets lost, the current job will end up storing another recipe of the day.

86
00:06:22,500 --> 00:06:28,290
This is why we're using the transience API currently, the data will get saved in the database.

87
00:06:28,440 --> 00:06:32,220
We won't be able to see the benefits of using the transience API.

88
00:06:32,310 --> 00:06:34,320
But on a production server, we will.

89
00:06:34,680 --> 00:06:41,280
Assuming you also install a third party cache plugin inside the Chron function, we're going to query

90
00:06:41,280 --> 00:06:43,110
the database for a random recipe.

91
00:06:43,470 --> 00:06:46,170
We'll be using this query in multiple locations.

92
00:06:46,180 --> 00:06:52,350
So it would be ideal to place this code into its own function that we can call later on inside the includes

93
00:06:52,350 --> 00:06:52,800
folder.

94
00:06:52,920 --> 00:06:54,870
Create a file named utility.

95
00:06:58,020 --> 00:07:03,750
We'll be placing any custom reusable functions here, sometimes you'll have stuff like that, so it's

96
00:07:03,750 --> 00:07:09,120
always good practice to place those functions in a file like this, include this file from the main

97
00:07:09,120 --> 00:07:09,870
plug and file.

98
00:07:13,940 --> 00:07:19,550
Inside the utility file, we're going to define a function called arget random recipe.

99
00:07:21,850 --> 00:07:28,930
Inside this, we're going to need the global UPD object, then we're going to make a query for a recipe

100
00:07:28,950 --> 00:07:29,240
it.

101
00:07:31,150 --> 00:07:36,240
Let me break down this query, we only want the post it from the post table.

102
00:07:36,550 --> 00:07:42,770
The PDB object provides a post property that contains the name of the Post's stable name.

103
00:07:43,210 --> 00:07:49,270
Next, we want to make sure we only grab published posts and posts with the post type of recipe.

104
00:07:49,720 --> 00:07:56,110
Lastly, we want to order the results randomly using the random MySQL function and limit the results.

105
00:07:56,140 --> 00:07:59,440
You want this query actually perform slow.

106
00:07:59,740 --> 00:08:03,270
There are a lot of examples out there that will generate a random row faster.

107
00:08:03,460 --> 00:08:09,190
However, this query only runs once a day, so it won't really stress the server because of that.

108
00:08:09,220 --> 00:08:11,790
This query will work just fine for our purposes.

109
00:08:12,040 --> 00:08:14,210
We are returning the results of this query.

110
00:08:14,920 --> 00:08:19,120
The last step is to set the transient switch back to the current function.

111
00:08:19,360 --> 00:08:22,060
We will use a function called Set Transient.

112
00:08:24,040 --> 00:08:29,530
In the resource section of this lecture, you'll find a link to the Transience API Codex page.

113
00:08:29,830 --> 00:08:31,930
This function has three parameters.

114
00:08:32,169 --> 00:08:34,210
The first is the name of our transient.

115
00:08:34,419 --> 00:08:37,000
I'm going to call this our daily recipe.

116
00:08:39,130 --> 00:08:42,789
The second parameter is the value, this can be anything we want.

117
00:08:43,030 --> 00:08:47,870
You don't have to worry about sanitizing this value as WordPress will sanitize it for us.

118
00:08:48,430 --> 00:08:51,910
I'm going to call the arget random recipe function.

119
00:08:54,090 --> 00:09:00,420
Lastly, we have to set an expiration time, the recipe should only last for a day, but time must be

120
00:09:00,420 --> 00:09:01,210
in seconds.

121
00:09:01,470 --> 00:09:04,620
We couldn't do the math and figure out how many seconds are in a day.

122
00:09:04,680 --> 00:09:06,930
But WordPress provides a constant for this.

123
00:09:07,410 --> 00:09:13,830
On the Transience API documentation page, you'll find this section called Using Time Constants.

124
00:09:14,160 --> 00:09:19,230
Here you'll find a couple of constants that WordPress creates for you that contain how many seconds

125
00:09:19,230 --> 00:09:22,530
are in an hour, day, week, month, etc..

126
00:09:22,830 --> 00:09:27,180
The constant day in seconds contains how many seconds are in a day.

127
00:09:27,600 --> 00:09:31,950
Pass this constant in as the third parameter to the set transition function.

128
00:09:34,500 --> 00:09:35,050
That's it.

129
00:09:35,220 --> 00:09:41,340
We now have a random recipe of the day, we'll get the same recipe every day since we only have published

130
00:09:41,340 --> 00:09:42,090
one recipe.

131
00:09:42,360 --> 00:09:45,620
You'll have to reactivate the plug in again for this to take effect.

132
00:09:53,710 --> 00:09:59,000
We can now display the recipe of the day inside the widget, back inside the widget method.

133
00:09:59,110 --> 00:10:01,870
We are past two variables named arguments.

134
00:10:01,870 --> 00:10:08,140
And instance, let's use the extract function to convert these two variables from arrays to single variables.

135
00:10:12,330 --> 00:10:16,590
This isn't required, but it makes it easier to read our code when using widgets.

136
00:10:18,820 --> 00:10:25,060
One of the variables extracted is called title, we will want to filter the title by using the apply

137
00:10:25,060 --> 00:10:26,020
filters function.

138
00:10:28,270 --> 00:10:33,220
This function will trigger a filter, hook the hook we want to trigger is called widget title.

139
00:10:33,520 --> 00:10:37,640
The second parameter for this function is the data we want to pass onto this hook.

140
00:10:38,020 --> 00:10:41,400
Keep in mind that filters will return a filtered value.

141
00:10:41,710 --> 00:10:43,870
Therefore, we'll want to store the value.

142
00:10:44,450 --> 00:10:49,360
Any plugin that wants to filter the title of our widgets can now do so, including us.

143
00:10:49,630 --> 00:10:56,410
We're going to echo out some variables provided by the arguments around the before widget is the HTML

144
00:10:56,410 --> 00:10:57,490
before every widget.

145
00:10:57,880 --> 00:11:01,090
The before title is the HTML before the title.

146
00:11:03,250 --> 00:11:09,160
You'll notice that the names used here correspond to the keys for register sidebar function, I'm going

147
00:11:09,160 --> 00:11:12,790
to open the widgets file inside the theme we created earlier.

148
00:11:15,170 --> 00:11:19,050
These four keys are the actual values for the variables we just used.

149
00:11:19,460 --> 00:11:25,400
Everything will have different HTML, but since we're using our own custom theme, we'll know the values

150
00:11:25,400 --> 00:11:31,700
of these variables continuing on, we'll want to upend the title and then echo out the after title.

151
00:11:33,860 --> 00:11:41,000
We don't have to worry about the HTML styling is up to the theme, next, we echo out the after widget

152
00:11:41,000 --> 00:11:42,230
to close up everything.

153
00:11:44,350 --> 00:11:50,710
Before the after, which we want to echo out the recipe of the day along with a link to it, let's grab

154
00:11:50,710 --> 00:11:52,780
the transient that contains the ID.

155
00:11:53,080 --> 00:11:59,320
We can grab the transient we created earlier by using the get transient function we pass in the name

156
00:11:59,320 --> 00:12:01,090
of the transient we want to grab.

157
00:12:01,390 --> 00:12:03,460
This would be our daily recipe.

158
00:12:05,770 --> 00:12:07,960
Sometimes the transient may not work.

159
00:12:08,170 --> 00:12:11,330
This can be due to a failed cron job or failed query.

160
00:12:11,620 --> 00:12:14,240
If that happens, we'll want to create a backup.

161
00:12:14,470 --> 00:12:19,000
I'm going to create a conditional statement checking if the recipe ID is empty.

162
00:12:21,210 --> 00:12:28,830
If it is, I'm going to create a new recipe ID using the arget random recipe function, I'll also update

163
00:12:28,830 --> 00:12:32,640
the transient using the set transient function with the new value.

164
00:12:39,720 --> 00:12:45,510
The next step is to render the HTML, I'm going to grab the HTML from the static template and paste

165
00:12:45,510 --> 00:12:46,050
it in here.

166
00:12:47,440 --> 00:12:51,670
Now, all we have to do is take the time to convert it into a dynamic template.

167
00:12:52,090 --> 00:12:53,900
This is nothing you haven't done before.

168
00:12:54,280 --> 00:12:59,550
I'm going to replace the links with the get permalink function and pass in the recipe ID.

169
00:13:04,970 --> 00:13:10,190
Then I'm going to echo out the title, lastly, I'm going to use the post thumbnail.

170
00:13:20,970 --> 00:13:21,730
That's about it.

171
00:13:21,900 --> 00:13:25,890
Let's check if everything works, go to the homepage of our site and refresh.

172
00:13:26,080 --> 00:13:28,410
It seems like everything is working perfectly.

173
00:13:28,650 --> 00:13:31,710
We can click on this recipe and review the recipe of the day.

174
00:13:32,160 --> 00:13:36,370
After you've confirmed everything works, you can finally move on to the next lecture.

175
00:13:36,660 --> 00:13:39,400
That was a lot to do, but it was well worth the effort.

176
00:13:39,660 --> 00:13:44,430
Hopefully you understand how to create widgets, transients and chron jobs.

