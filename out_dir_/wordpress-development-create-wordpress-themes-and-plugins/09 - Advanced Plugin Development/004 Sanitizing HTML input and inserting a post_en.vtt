WEBVTT

00:07.390 --> 00:09.710
Let's start working on submitting the recipe.

00:10.000 --> 00:13.780
Let's give the recipe form an idea of recipe dash form.

00:15.970 --> 00:21.520
Above this form, let's add a status div with the ID of recipe dash status.

00:24.760 --> 00:30.520
We'll use this Divx to display a message to the user whether or not the recipe was simple and successfully

00:31.090 --> 00:33.280
open the main dog's file.

00:35.330 --> 00:38.280
This is the same file that should contain the reading submission.

00:38.660 --> 00:41.870
Let's listen for the form submission using the on method.

00:46.690 --> 00:48.790
We'll be given an event object.

00:49.060 --> 00:53.080
We're going to call the prevent default method so that the form isn't submitted.

00:55.320 --> 01:00.700
We want to use Ajax for submitting the form, we're going to hide the form during submission.

01:00.990 --> 01:03.840
This will make sure the user doesn't submit the form twice.

01:05.940 --> 01:12.260
Next, we're going to select the Status d'Hiv and add some HTML, add a simple weighting message.

01:12.510 --> 01:16.100
I'm going to wrap this around some bootstrap markup to make it look good.

01:22.340 --> 01:28.520
Just like last time, create an object that will contain the form values to grab the values, you simply

01:28.520 --> 01:33.140
select the input field by their IDs and use the VAL method to get the value.

01:36.480 --> 01:40.230
For the action will set this to our submit user recipe.

01:45.540 --> 01:51.510
Grabbing the content from the editor is pretty simple when we included the editor, WordPress also loaded

01:51.510 --> 01:53.340
the tiny MCE object.

01:53.670 --> 01:59.400
We can grab the content by using this object and grabbing the current active editor and called the get

01:59.400 --> 02:02.730
content method, which will return unsanitized each HTML.

02:05.130 --> 02:09.060
Lastly, we submit this data using GAO queries post method.

02:13.410 --> 02:20.400
Remember that the recipe object is available to us and we can use it to provide the Ajax You URL inside

02:20.400 --> 02:24.090
the response function, we'll be doing either one of two things.

02:24.360 --> 02:30.060
We're going to check the data object for a status property and check if its value is equal to two.

02:30.480 --> 02:36.220
If it is, then we know that the form submission was a success, otherwise an error occurred.

02:36.840 --> 02:41.850
I'm going to update the status h html appropriately if the submission was a failure.

02:41.910 --> 02:43.530
I'm going to show the form again.

02:45.200 --> 02:52.400
Let's handle the form submission now inside the main plug and file, let's add the action Hook WP Ajax.

02:54.500 --> 03:00.350
We have to append our action to this hook like so the function we want to call will be the same name

03:00.350 --> 03:01.070
as the action.

03:01.460 --> 03:06.920
I'm also going to make this hook available for guests as I'm going to allow for guest submissions to.

03:09.170 --> 03:16.280
Inside the process folder, create the file called submit dash user dash recipe and define the function

03:16.280 --> 03:16.640
here.

03:17.060 --> 03:19.990
We'll need to include this file from the main plugin as well.

03:25.710 --> 03:27.990
Create a variable named output.

03:30.210 --> 03:34.710
This will be an array that will contain the status, set the status to one.

03:36.900 --> 03:42.210
I'm going to perform a very simple check on the title input, I want to know if it's empty.

03:42.390 --> 03:47.610
If it is, I'm going to send back the output with the WP, send Jason function.

03:47.910 --> 03:49.710
This will also kill the scripts.

03:54.900 --> 03:57.360
After this, I'm going to paste in some code.

03:58.870 --> 04:00.460
Pause the video if you need to.

04:00.670 --> 04:05.200
All I'm doing here is sanitizing the input, I'm also creating the metadata.

04:05.470 --> 04:12.490
We create the recipe data array just like last time I've set the rating and rating count to zero.

04:13.000 --> 04:18.220
Something you'll notice is that for the title, I'm using these sanitized TextField function, but I'm

04:18.220 --> 04:20.550
not applying this to the content itself.

04:20.890 --> 04:23.830
We can't use this function for sanitizing the content.

04:24.250 --> 04:29.950
Instead, I'm using a function called WP KSEE Post and the resource section.

04:29.950 --> 04:33.490
I provide a link to a function called WPX says.

04:34.030 --> 04:36.270
Let's take a look at this function in more detail.

04:36.580 --> 04:41.230
There are a few libraries out there in AP that help with sanitizing each HTML.

04:41.680 --> 04:46.780
WordPress provides its own solution, which is the preferred method for sanitizing HTML.

04:47.320 --> 04:55.090
The WPX function is a pretty flexible function as it allows us to define what HTML tags, attributes

04:55.090 --> 04:56.710
and protocols are allowed.

04:57.100 --> 05:03.190
It would be pretty time consuming to have to re-enter what HTML is allowed every time we use this function.

05:03.850 --> 05:08.500
If we scroll down, there's a link to the WP KSEE post function.

05:08.860 --> 05:15.640
This function does the exact same thing as the WP access function, but instead uses the same filter

05:15.640 --> 05:16.320
for posts.

05:16.660 --> 05:23.260
This saves us some time since our recipe post is basically just a post, it makes sense to just use

05:23.260 --> 05:24.310
this Schauder function.

05:24.610 --> 05:31.990
If you prefer to define your own set of HTML and attributes, then I suggest using the WP KSEE function.

05:32.620 --> 05:36.790
All our data is now sanitized and ready to be inserted into the database.

05:37.090 --> 05:39.460
Inserting opposes actually really easy.

05:39.760 --> 05:44.800
We don't even have to use the global WP object to perform this task.

05:45.160 --> 05:49.270
WordPress provides a handy function called WP Insert Post.

05:49.660 --> 05:53.110
I'll provide a link to this function inside the resources section.

05:53.800 --> 05:59.260
This function will insert a post for us and even take care of sanitisation just in case we forgot to

05:59.260 --> 06:00.220
do it ourselves.

06:00.610 --> 06:03.610
There's only one parameter, which is an array of arguments.

06:03.910 --> 06:07.660
There are numerous things we can set, but we won't be using all of them.

06:07.960 --> 06:11.110
The only required arguments are the content and the title.

06:11.680 --> 06:14.410
If we skip anything, WordPress will fill in the rest.

06:14.410 --> 06:19.990
By default, this function will end up returning the idea of the post created, which we will need for

06:19.990 --> 06:26.500
adding the post metadata, creating a variable named post ID and its value will be the value returned

06:26.500 --> 06:28.840
by the WP insert post function.

06:31.100 --> 06:32.340
Pass in an array.

06:32.660 --> 06:38.810
We're going to define the following arguments, post content will be set to the content variable.

06:41.050 --> 06:44.380
Post name and post title will both be set to the title.

06:50.840 --> 06:56.060
The difference between these two is the name will be used for the slug and the title is used for the

06:56.060 --> 07:00.440
human readable title, post status will be set to pending.

07:02.540 --> 07:08.510
By default, this is set to draft, will consider the post complete, but we don't want to publish the

07:08.510 --> 07:09.380
recipe either.

07:09.710 --> 07:14.270
Pending will let administrators know that the Post needs to be reviewed before being published.

07:14.750 --> 07:18.430
Post type will be set to recipe, since that is our post type.

07:20.830 --> 07:21.440
That's it.

07:21.670 --> 07:26.620
Feel free to read over the codex and set the rest of the arguments if you would like to customize this

07:26.620 --> 07:27.070
further.

07:27.430 --> 07:32.590
Next, let's call the update post meta function to set the recipe data metadata.

07:36.650 --> 07:42.620
Our function is almost finished, all we need to do now is update the status in the output array to

07:42.620 --> 07:46.670
two and then output it using the WP, send JSON function.

07:48.860 --> 07:52.730
Refresh the recipe form page and try submitting the form with no input.

07:52.910 --> 07:54.110
You should get an error.

07:56.650 --> 08:00.220
Now, try filling in all the fields and we should see a success message.

08:02.600 --> 08:08.480
You should also have your console open to check for any errors if you've received no errors and received

08:08.480 --> 08:09.650
a success message.

08:09.770 --> 08:11.790
Then there's one last thing we need to check.

08:12.140 --> 08:15.650
Go to the recipe admin page and see if the post has been added.

08:17.790 --> 08:23.520
After confirming that it's available, let's view the contents in the editor, as you can see, everything

08:23.520 --> 08:24.770
was inputted correctly.

08:25.110 --> 08:26.850
This is exactly what we wanted.

08:27.120 --> 08:30.470
We now have a form where users can submit their own recipes.

08:30.840 --> 08:36.030
What I like about this is that even though we're not using the Gutenberg editor on the front end, this

08:36.030 --> 08:36.830
will still work.

08:37.170 --> 08:40.960
The content has been converted into a blog called The Classic Block.

08:41.310 --> 08:43.620
This makes Gutenberg backwards compatible.
