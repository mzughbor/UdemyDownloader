1
00:00:07,650 --> 00:00:09,270
Our plugin is almost complete.

2
00:00:09,480 --> 00:00:11,740
There are just a few more things that need to be done.

3
00:00:12,030 --> 00:00:14,250
The next thing on our list is to make a widget.

4
00:00:14,550 --> 00:00:17,000
This widget will display a recipe of the day.

5
00:00:17,250 --> 00:00:23,190
If you open the static template, you'll find a widget that displays the recipe of the day will be creating.

6
00:00:23,190 --> 00:00:27,320
This will be using a few WordPress APIs to make this work.

7
00:00:27,660 --> 00:00:29,940
The first API is the Widgets API.

8
00:00:30,210 --> 00:00:34,440
In the resource section of this lecture, I provide a link to the Widgets API.

9
00:00:34,740 --> 00:00:38,810
WordPress provides some really good examples on how to implement your own widget.

10
00:00:39,210 --> 00:00:43,120
We will have to use some object oriented programming to create a widget.

11
00:00:43,560 --> 00:00:47,090
Don't worry, it's easy inside the main plug and file.

12
00:00:47,100 --> 00:00:49,770
Let's use the action hook called widgets in it.

13
00:00:52,000 --> 00:00:57,160
This book is called When Widgets Are Initialized, we will be able to register our widget with this

14
00:00:57,160 --> 00:00:57,560
hook.

15
00:00:57,880 --> 00:01:00,950
The function will want to call is our widgets in it.

16
00:01:01,420 --> 00:01:04,629
We're going to define this function inside a file called Widgets.

17
00:01:05,290 --> 00:01:10,480
We create this file inside the includes folder and include it from the main plug and file.

18
00:01:17,550 --> 00:01:23,940
This book is called Very Early On, so to make sure our file is included properly, we have to prepend

19
00:01:23,940 --> 00:01:26,100
the plug and directory to the inclusion.

20
00:01:26,430 --> 00:01:31,980
We can accomplish this by using the name function and passing in the plug and royal constant like so.

21
00:01:34,410 --> 00:01:36,580
This file will now be loaded properly.

22
00:01:37,210 --> 00:01:43,230
Next, let's register the widget to register a widget, we have to call the register widget function.

23
00:01:45,350 --> 00:01:50,580
This function has one required parameter, and that's the name of the class that contains our widget.

24
00:01:50,900 --> 00:01:54,110
I'm going to pass in our daily recipe widget.

25
00:01:58,300 --> 00:02:04,690
This class doesn't exist, let's create it now, I'm going to create a folder called Widgets inside

26
00:02:04,690 --> 00:02:05,770
the Includes folder.

27
00:02:08,090 --> 00:02:15,020
Next, create a file called Daily Dash Recipe and create a class called our Daily Recipe Widget.

28
00:02:15,470 --> 00:02:18,260
Lastly, include this file from the main plugin file.

29
00:02:25,400 --> 00:02:31,130
The code for loading the which is finished, let's focus on creating the widget now, this class has

30
00:02:31,130 --> 00:02:33,620
to extend that WP widget class.

31
00:02:35,910 --> 00:02:41,400
This class will help integrate our widget with WordPress, a system it'll leave us to take care of the

32
00:02:41,400 --> 00:02:47,730
rest by displaying the widget and setting up the fields, go back to the Widgets API documentation page.

33
00:02:47,940 --> 00:02:50,420
You'll find a default usage section.

34
00:02:50,760 --> 00:02:54,270
Let's copy the code inside the class and paste it into hours.

35
00:02:59,550 --> 00:03:05,010
Let's go through this one by one, the construct function is where we'll be setting up the widget.

36
00:03:05,310 --> 00:03:09,720
There's only one thing we need to do, and that is called the parent constructor method.

37
00:03:10,140 --> 00:03:11,960
This method has three parameters.

38
00:03:12,270 --> 00:03:14,520
The first parameter is an ID for the widget.

39
00:03:14,700 --> 00:03:17,190
Set this to our daily recipe widget.

40
00:03:19,360 --> 00:03:21,860
The second parameter is the title of the widget.

41
00:03:22,150 --> 00:03:26,950
This will be displayed on the widgets admin page and will help users identify your widget.

42
00:03:27,280 --> 00:03:29,560
Let's call this widget recipe of the day.

43
00:03:31,730 --> 00:03:38,570
The last parameter is an array of additional options we can set for now, we only want to set the description.

44
00:03:38,840 --> 00:03:42,050
The description will be displayed on the widgets admin page.

45
00:03:42,290 --> 00:03:44,980
The description should be short and concise.

46
00:03:45,260 --> 00:03:48,790
Let's set this to displays a random recipe each day.

47
00:03:53,910 --> 00:03:58,980
WordPress will now officially recognize the widget, the next method is called widget.

48
00:03:59,340 --> 00:04:02,460
This method takes care of displaying the widget on the front end.

49
00:04:02,730 --> 00:04:04,290
I'm going to skip this for now.

50
00:04:04,530 --> 00:04:06,480
I promise we'll get back to it later.

51
00:04:06,750 --> 00:04:10,320
Before I move on, I'm going to move this method to the very bottom.

52
00:04:15,040 --> 00:04:21,050
The reason I do this is because of my workflow, I usually like to set up the widget method last.

53
00:04:21,610 --> 00:04:27,880
Now, the second method, formerly the third, is form WordPress will call this method to render reform

54
00:04:27,880 --> 00:04:33,220
that will allow the user to customize this widget your past in a variable named instance.

55
00:04:33,520 --> 00:04:36,940
This contains the form values of the current instance of the widget.

56
00:04:37,420 --> 00:04:39,610
Our widget won't be super complex.

57
00:04:39,880 --> 00:04:41,890
We're only going to have one field.

58
00:04:41,890 --> 00:04:43,590
And that's the title of the widget.

59
00:04:43,960 --> 00:04:51,010
First, let's create some default values since there's only a title will set the default title to Recipe

60
00:04:51,010 --> 00:04:51,550
of the day.

61
00:04:57,360 --> 00:05:03,650
Next, we're going to set the instance variable to the value returned by the function WP Pass ARGs.

62
00:05:06,010 --> 00:05:12,220
This is a utility function provided by WordPress, this method will merge to erase together and return

63
00:05:12,220 --> 00:05:13,020
the merged array.

64
00:05:13,660 --> 00:05:19,030
If the instance already has a title, then the default won't override that title.

65
00:05:19,390 --> 00:05:22,810
Otherwise, the title will be set from the default array.

66
00:05:23,290 --> 00:05:26,080
This will guarantee that will have a title set.

67
00:05:26,080 --> 00:05:30,790
Whether this is a new instance or not, the widget would be considered a new instance.

68
00:05:30,790 --> 00:05:35,950
If the user has dragged and dropped the widget onto a sidebar for the first time, the widget would

69
00:05:35,950 --> 00:05:37,600
be considered an old instance.

70
00:05:37,600 --> 00:05:42,100
If the widget is already on the sidebar, let's begin displaying the fields.

71
00:05:42,280 --> 00:05:44,290
I'm going to paste in this bit of code.

72
00:05:46,230 --> 00:05:51,670
Pause the video if you need to and copy what I have, let's go over what this code does.

73
00:05:51,720 --> 00:05:58,610
We have a label element will set the four attribute for the value returned by the get field method.

74
00:05:59,010 --> 00:06:01,670
This method will generate an ID for our field.

75
00:06:01,980 --> 00:06:04,200
You simply pass in the name of the field.

76
00:06:04,500 --> 00:06:06,540
We actually use this method twice.

77
00:06:06,780 --> 00:06:10,730
The second time is for the ID attribute in the input field.

78
00:06:11,310 --> 00:06:13,560
The next method is the get field name.

79
00:06:13,770 --> 00:06:16,080
Just like the get field ID method.

80
00:06:16,240 --> 00:06:19,040
This method will generate a name for our input.

81
00:06:19,350 --> 00:06:21,540
You may be thinking, why is this important?

82
00:06:21,720 --> 00:06:24,630
Can't we just generate our own names and IDs?

83
00:06:25,260 --> 00:06:28,170
The word widget form is submitted with Ajax.

84
00:06:28,410 --> 00:06:34,140
WordPress takes care of submitting the data and updating the corresponding fields since WordPress is

85
00:06:34,140 --> 00:06:36,030
handling the submission and updates.

86
00:06:36,120 --> 00:06:42,150
But it's required to give these fields special names rather than us having to worry about those names,

87
00:06:42,150 --> 00:06:44,460
we can use these methods to do it for us.

88
00:06:45,000 --> 00:06:50,460
It's recommended to let WordPress take care of generating these attributes for you, which is what these

89
00:06:50,460 --> 00:06:51,240
functions do.

90
00:06:51,630 --> 00:06:56,310
You'll also notice we don't create form tags because WordPress takes care of that.

91
00:06:56,310 --> 00:07:02,670
To the last attribute we're seeing is the value we output the instances title.

92
00:07:03,000 --> 00:07:06,600
We sanitize the value with the SC attribute function.

93
00:07:06,930 --> 00:07:11,880
This function will make sure that the value can be inserted into an attribute without breaking the code.

94
00:07:12,330 --> 00:07:15,780
To recap, the form method is for displaying the form.

95
00:07:16,110 --> 00:07:22,050
It's passed in an instance variable that contains information about the save data for the current widget.

96
00:07:22,560 --> 00:07:26,160
By default, the instance is empty for new widgets.

97
00:07:26,310 --> 00:07:30,900
Since that's the case, we create some default values and merge it with the instance.

98
00:07:31,170 --> 00:07:33,880
That way we always have the minimum data we need.

99
00:07:34,230 --> 00:07:37,170
Lastly, we simply output the fields like so.

100
00:07:37,830 --> 00:07:40,500
The third method we have is the update method.

101
00:07:40,800 --> 00:07:43,430
This method is called when a user submits the form.

102
00:07:43,740 --> 00:07:46,450
This allows us to filter the input in our own way.

103
00:07:46,830 --> 00:07:49,460
This method is passed in two variables.

104
00:07:49,710 --> 00:07:54,210
The first is the new submitted data and the second is the previous instance data.

105
00:07:54,750 --> 00:07:57,900
I'm going to create a new variable called instance.

106
00:07:59,980 --> 00:08:06,070
This will contain all our widget settings, we only have one setting, which is the title, we'll set

107
00:08:06,070 --> 00:08:08,590
the title to the new instanced title.

108
00:08:10,840 --> 00:08:16,560
We're going to just sanitize the title by stripping any tags from the input, using the strip tags function,

109
00:08:17,020 --> 00:08:22,450
then you have to return this instance so that WordPress can then save our widget settings.

110
00:08:24,990 --> 00:08:30,660
Before we finish, let's go back to the widget method and echo out a simple recipe of the day message

111
00:08:30,930 --> 00:08:32,309
will be changing this later.

112
00:08:34,590 --> 00:08:36,630
Let's go to the widget admin page.

113
00:08:42,690 --> 00:08:48,450
You should find the widget ready to use and this widget to your sidebar and place it at the very top,

114
00:08:48,720 --> 00:08:52,880
WordPress takes care of setting up the UI for us and displaying the form.

115
00:08:53,250 --> 00:08:56,290
We can change the title and it will be updated properly.

116
00:08:56,610 --> 00:08:57,620
Let's view our site.

117
00:08:57,840 --> 00:09:00,830
You should see the widget being outputted onto the sidebar.

118
00:09:01,140 --> 00:09:03,960
The widget method is called to display the widget.

119
00:09:04,590 --> 00:09:08,040
Now the question is, how do we display a recipe of the day?

120
00:09:08,430 --> 00:09:12,560
We have to take care of picking a random recipe and make it last for a day.

121
00:09:12,960 --> 00:09:16,110
Then our widget should refresh the recipe of the day.

122
00:09:16,500 --> 00:09:19,720
We can do this a number of ways, like using the options API.

123
00:09:20,050 --> 00:09:25,560
However, there's an API meant for this kind of task, which is called the Transience API.

124
00:09:26,010 --> 00:09:28,740
Before we use that, we have to set up a cron job.

125
00:09:29,220 --> 00:09:32,850
We'll tackle how to do most of these tasks in the next lecture.

