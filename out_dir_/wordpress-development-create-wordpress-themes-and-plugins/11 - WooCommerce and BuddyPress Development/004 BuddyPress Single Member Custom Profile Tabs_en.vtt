WEBVTT

00:07.170 --> 00:13.530
Here's what I want to do now, I want to add some profile tabs so other users can view any recipes a

00:13.530 --> 00:16.740
user has submitted, this will take some time to do so.

00:16.740 --> 00:23.250
Bear with me here in the resource section of this lecture, I provide a link to the BP core new NAV

00:23.250 --> 00:24.090
item function.

00:24.570 --> 00:27.210
This function will add a tab to the profile page.

00:27.600 --> 00:32.000
This function can be found by going to documentation developer resources.

00:32.460 --> 00:35.970
This page gives more of a technical overview for Buddy Press.

00:36.300 --> 00:41.280
You'll find a list of functions on the sidebar, one of them being the function I just showed you.

00:41.880 --> 00:46.990
Unfortunately, this example usage doesn't really explain everything to get started using it.

00:47.340 --> 00:51.900
Don't worry, though, I'll explain the extra steps you need to take in order to use this function,

00:52.440 --> 00:56.130
open the function, smile and use an action hook called BP.

00:56.130 --> 00:57.000
Set up NAV.

01:01.270 --> 01:07.150
This hook isn't documented by Buddy Press on their site, but this is the hook you need to use to begin

01:07.150 --> 01:13.330
setting up navigation items on the profile page, the function I want to call will be named Jiyu Buddy

01:13.330 --> 01:14.860
Press Profile Tabs.

01:17.460 --> 01:19.960
As you may know, I like to stay organized.

01:20.160 --> 01:24.690
I'm going to create a folder inside the includes folder called Buddy Press.

01:25.140 --> 01:31.410
This folder will include all functions and code related to extending and modifying Buddy Press inside

01:31.410 --> 01:32.090
this folder.

01:32.130 --> 01:39.250
I'm going to create a file named Profile Dash Tabs, but I'm going to define the function here.

01:39.660 --> 01:42.810
Lastly, I'm going to include it from the functions file.

01:49.120 --> 01:55.390
Inside this function, we're going to need the global BP variable, this global variable is defined

01:55.390 --> 01:57.300
and provided to you by buddy press.

01:57.670 --> 02:01.760
The function we're about to call needs this variable so that it can function correctly.

02:02.470 --> 02:06.460
Next, let's call the function BP core, new NAV item.

02:08.680 --> 02:14.390
It has one parameter, which is an array of settings, the first setting is the name which will set

02:14.390 --> 02:15.400
to recipe's.

02:15.700 --> 02:19.810
This will appear as the tab name, make sure it's translatable as well.

02:22.360 --> 02:26.880
The next setting is the slug, which is what will be appended to the member, you are out.

02:27.250 --> 02:28.980
You'll see what this looks like in a minute.

02:29.170 --> 02:31.150
I'm going to set it to recipe's.

02:33.720 --> 02:38.280
The next setting is the position I'm going to set this to 100.

02:40.560 --> 02:45.780
This will determine the spot, it appears in the menu, the lower the number, the chances are it'll

02:45.780 --> 02:47.410
appear first inside the menu.

02:47.760 --> 02:49.430
I want this to appear last.

02:49.440 --> 02:51.390
So I'm setting this to a high number.

02:52.080 --> 02:54.450
The next setting is the screen function.

02:54.720 --> 02:59.430
You can pass in the name of the function that will take care of displaying the content to the user when

02:59.430 --> 03:00.480
this page is loaded.

03:00.870 --> 03:04.470
I'm going to set this to Jiyu recent recipes tab.

03:06.990 --> 03:10.050
Up next is the show for displayed user setting.

03:12.410 --> 03:18.350
This option will determine if the menu and page will appear, if the page belongs to the current logged

03:18.350 --> 03:22.770
in user, if a user is logged in and they're viewing someone else's profile.

03:22.910 --> 03:27.150
Should they be able to view this page or is it just for the page owner's eyes?

03:27.770 --> 03:29.630
I'm going to set this to true.

03:29.900 --> 03:32.720
This will mean everyone will be able to see this page.

03:33.020 --> 03:39.230
The next setting is the item seaside setting, which is just the ID attribute you can use to style this

03:39.230 --> 03:39.890
menu item.

03:40.310 --> 03:43.670
I'm going to set this to J you user recipes.

03:46.310 --> 03:51.290
The very last setting is the default sub now slug that will set to recipe's.

03:53.660 --> 04:00.530
This is for the submenu navigation, there are usually two navigation menus for profiles, if you were

04:00.530 --> 04:03.650
to look at the profile page, you'll see this main menu.

04:03.650 --> 04:07.880
And under it is another menu, which is relative to the active main menu item.

04:08.330 --> 04:14.070
If I were to change the item in the primary menu, you'll notice the sub navigation changes accordingly.

04:14.480 --> 04:21.410
You'll also notice our recipes menu item up here and now I don't plan on having a sub navigation menu,

04:21.500 --> 04:25.760
so I've decided to set the sub menu to the same name as the primary menu.

04:26.150 --> 04:31.160
Buddy Press will be able to determine that there's no need for a sub menu and that it doesn't have to

04:31.160 --> 04:31.850
worry about it.

04:32.480 --> 04:37.610
Before we move forward with displaying the content, I want to perform one check before we run this

04:37.610 --> 04:38.300
bit of code.

04:38.750 --> 04:43.800
The content I want to display will only display submitted recipe posts by the user.

04:44.210 --> 04:49.580
However, there is a chance that the admin will not even have this plugin installed or activated.

04:49.910 --> 04:53.090
If that's the case, I don't want to display this menu item.

04:53.810 --> 04:55.880
There are three solutions we can use.

04:56.150 --> 05:00.520
The first solution is to use the function exists function like we've always done.

05:00.950 --> 05:05.070
However, I want to take it a step further and check if the plugin is activated.

05:05.510 --> 05:10.840
The second solution would be to move all the buddy press code into the recipe plug in itself.

05:11.270 --> 05:16.700
While this might seem like a great solution and completely acceptable by Buddy Press, it does cause

05:16.700 --> 05:20.190
a problem with having the recipe plug and be usable with any theme.

05:20.810 --> 05:24.480
Keep in mind that plug ins should be compatible with most things by default.

05:24.860 --> 05:29.270
I only want this functionality to be available with my Udemy theme and nothing else.

05:29.640 --> 05:32.270
That's why we're doing all this in the theme itself.

05:32.570 --> 05:35.860
The third solution would be to check if the plugin is activated.

05:36.170 --> 05:37.790
This is very simple to do.

05:38.000 --> 05:39.890
This is the solution will be using.

05:40.460 --> 05:45.470
First, I'm going to create a new file inside the includes folder called Utility.

05:48.870 --> 05:55.080
This file will contain all our utility functions, utility functions are just normal page functions

05:55.080 --> 06:00.870
that really can't do anything by themselves but make it easier to process data, make sure to include

06:00.870 --> 06:02.910
this file from the main functions file.

06:07.200 --> 06:12.750
Before we define a function, I want to make sure if it's been defined beforehand, I'm going to check

06:12.750 --> 06:16.740
if a function called Jiyu plug in activated check exists.

06:18.970 --> 06:24.820
If it doesn't will define it ourselves, this function will accept the plug in filename, which will

06:24.820 --> 06:26.530
be required to use this function.

06:27.040 --> 06:30.550
Inside this function, we need to require the file.

06:30.590 --> 06:35.350
WP dash admin includes plug in PHP.

06:41.000 --> 06:43.890
The function I want to use is not loaded on every page.

06:44.450 --> 06:47.080
We'll need to include it ourselves just in case.

06:47.750 --> 06:52.760
Then I'm going to return the value returned by the ears, plug an active function.

06:55.130 --> 06:57.200
Will pass him the plug and file name.

06:57.560 --> 07:02.560
This is a WordPress function that will check if the plug and we passed in is activated and installed.

07:02.930 --> 07:08.180
You can think of the function we just made as a sugar function because it's just a shorthand way of

07:08.180 --> 07:10.620
writing these two lines of code into one line.

07:11.480 --> 07:16.230
It's also common practice to check if certain utility functions have already been defined.

07:16.670 --> 07:20.870
I've been in situations where I've developed multiple plug ins for the same site.

07:21.320 --> 07:24.020
This has resulted in me reusing functions.

07:24.380 --> 07:29.330
Checking if a function has already been defined is a good way to prevent collisions with your own code.

07:29.960 --> 07:34.660
With the function defined, let's use it inside the profile taps file.

07:34.670 --> 07:38.930
Let's use a conditional statement and call the utility function we just created.

07:45.780 --> 07:52.260
The plug in filename is the file path relative to the plug ins directory, in our case it would be recipe

07:52.260 --> 07:56.000
and then the main plug and file, which is the index top file.

07:56.340 --> 08:02.280
If this function returns false, we're going to simply return the function, preventing it from executing

08:02.280 --> 08:03.330
the rest of this code.

08:04.980 --> 08:09.220
Now that we've got that established, we can begin to display the actual content.

08:09.600 --> 08:11.760
I'm going to create a brand new file.

08:11.760 --> 08:17.580
Inside the includes a buddy press directory called Profile Dash Postop BHP.

08:20.190 --> 08:26.100
Define the screen function we passed into the town function, which should be Jiyu recent recipes tab

08:26.580 --> 08:29.610
LASLEY include this file from the functions file.

08:34.150 --> 08:39.880
Inside this function, we have to do three things we are allowed to just start outputting content,

08:39.940 --> 08:42.430
but that's not really the correct way to do things.

08:42.820 --> 08:45.820
But press is a plug in that is easily extendable.

08:46.120 --> 08:51.880
If you looked through any of the templates, you'll notice there were a lot of due action and apply

08:51.880 --> 08:54.140
filters function spread throughout the code.

08:54.610 --> 08:59.830
This means that Buddy Press even allows other developers to extend it like we're doing right now.

09:00.610 --> 09:03.000
Creating TAB pages is no different.

09:03.340 --> 09:08.400
We should allow developers to extend this tab page just like any other body press page.

09:08.800 --> 09:10.810
Luckily, it's pretty easy to do.

09:11.120 --> 09:14.530
I want to call the function BP core load template.

09:16.860 --> 09:22.170
This function will load a core template from Buddy Press with Fall-back support, the template that's

09:22.170 --> 09:24.480
loaded depends on the string you pass in.

09:25.170 --> 09:27.830
Before I pass in a string, I want to filter it.

09:28.080 --> 09:31.710
We have to use the apply filters function the filter hook.

09:31.710 --> 09:34.560
I want to call SBP core template plug in.

09:37.040 --> 09:42.860
This is a buddy press hug that other developers can use to modify the path of a template, specifically,

09:42.980 --> 09:45.710
this will modify the path to the plugin template.

09:46.340 --> 09:49.610
The plugin template is a very special template in Buddy Press.

09:49.820 --> 09:55.060
Its purpose is specifically for plugins plug ins, get a template to load their content.

09:55.370 --> 09:59.800
The path to this template is members single slash plugins.

10:00.200 --> 10:03.670
Let's take a look at this template inside the buddy press plug in.

10:03.680 --> 10:05.330
Let's open this template file.

10:12.180 --> 10:18.330
Here is what Buddy Press says about this plug in inside this blog, comic third party plug ins should

10:18.330 --> 10:23.100
use this template to easily add template support to their plug ins for the members component.

10:23.850 --> 10:26.490
This is the template that will load our plug ins content.

10:26.880 --> 10:31.470
I'm fine with the way it is, so I'm going to leave this template as is now.

10:31.470 --> 10:35.260
The question is, how do we load our content inside this template?

10:35.610 --> 10:41.780
Well, if you scroll down this template, you'll find two calls to the BP nouveaux member hook function.

10:42.420 --> 10:46.660
We won't go down the rabbit hole for this function because there's quite a bit going on with it.

10:46.920 --> 10:48.600
I'll just explain what they do.

10:48.960 --> 10:55.650
You pass in a value and it'll prepend the text BP underscore, template, underscore, then it'll call

10:55.650 --> 10:59.040
the do action function and trigger a hook for you to use.

10:59.550 --> 11:05.610
The first example will trigger the BP template title hook and the second example will trigger the BP

11:05.610 --> 11:06.950
template content hook.

11:07.500 --> 11:09.650
You can use these hooks to load your content.

11:09.930 --> 11:14.460
It's important to understand that this template is meant for plugins other than Buddy Press.

11:14.850 --> 11:17.880
Buddy Press does not use this page for its own pages.

11:18.150 --> 11:22.370
Because of this, we're expected to use these hooks ourselves to load our content.

11:23.040 --> 11:28.590
Normally we would open the functions, file and hook into these two hooks, but these two hooks are

11:28.590 --> 11:30.090
available on those templates.

11:30.690 --> 11:35.580
This is a problem as we could potentially divide or display information that we don't want to.

11:35.970 --> 11:39.040
We only want our code to apply to the recipe page.

11:39.450 --> 11:45.930
Luckily, we don't have to use the add action function in just the functions file back inside the tab

11:45.930 --> 11:46.520
function.

11:46.530 --> 11:50.460
I'm going to call the add action function twice for both hooks.

11:50.760 --> 11:57.660
I'm going to pass in the two hooks and call the functions Jiyu Buddy Press recent post title and Jiyu

11:57.660 --> 12:00.000
Buddy Press post content respectively.

12:07.560 --> 12:12.720
Since the screen function will only run if the tab has clicked and loaded, we can safely assume these

12:12.720 --> 12:18.450
two hooks will only be added and called at this point to this code will be placed right before we load

12:18.450 --> 12:19.020
the template.

12:19.020 --> 12:24.870
Since the template is the one calling these two hooks right below this code, I'm going to define both

12:24.870 --> 12:25.530
functions.

12:25.800 --> 12:30.510
The title function will just have a div tag with the class text center.

12:30.960 --> 12:33.150
My text will be my recipe's.

12:40.030 --> 12:45.700
The content function will have a list of the recipes the user has submitted, the first thing I want

12:45.700 --> 12:52.660
to do is grab the ID of the current profile, create a variable called profile user ID and assign its

12:52.660 --> 12:54.210
value returned by the function.

12:54.220 --> 12:59.290
BP displayed user ID, which will grab the ID of the current user profile.

13:01.950 --> 13:07.510
I'm going to make a conditional statement to make sure this I.D. is not empty, if it is empty.

13:07.560 --> 13:10.980
We'll simply return the function and not display anything at all.

13:14.830 --> 13:20.830
Now that we have an I.D., I'm going to create a new variable named Post, which will be a custom query.

13:21.340 --> 13:23.560
There are only three things I want to set.

13:23.920 --> 13:27.550
The first is the author, which will be set to the user ID.

13:32.760 --> 13:39.420
We only want to grab posts based on the profile being viewed, then I want to set the posts per page

13:39.420 --> 13:40.440
setting to 10.

13:42.880 --> 13:47.660
I only want the ten most recent posts, since this is a custom post type.

13:47.710 --> 13:52.510
We have to set the post type two recipe so that it'll only grou recipe posts.

13:55.180 --> 14:00.190
Then, just like any other loop, I'm going to begin the process of looping through all of this.

14:08.450 --> 14:09.560
Nothing new so far.

14:09.680 --> 14:11.790
I only want to output the excerpt.

14:12.080 --> 14:14.660
Luckily, we don't have to rewrite the code for that.

14:14.870 --> 14:18.130
If you can recall, we already have a template for excerpts.

14:18.380 --> 14:26.390
I'm going to call the git template part function and pass in Parshall's Post content dash excerpt,

14:26.570 --> 14:30.050
which will use the template part we use in the index template.

14:32.750 --> 14:38.210
Lastly, I'm just going to reset the data using the WP reset post data function.

14:44.420 --> 14:49.790
Let's check out the recipe tab now, everything is coming out great except that the images are a bit

14:49.790 --> 14:50.350
too big.

14:50.780 --> 14:52.870
We really don't need all this space.

14:53.060 --> 14:55.060
I'm going to adjust my tent a little bit.

14:55.340 --> 14:58.700
I'm going to wrap my loop with two sets of div tags.

14:58.940 --> 15:05.540
I'll apply the ID post to the first div with the classes row, justify content and center.

15:17.600 --> 15:21.930
The second div tag will how the class is COLB MDH.

15:23.550 --> 15:29.700
The classes I'm currently applying are bootstrap classes, I recommend you check out the bootstrap documentation

15:29.700 --> 15:31.340
to learn more about these classes.

15:31.620 --> 15:36.810
All they do is center the content for us, refresh the page and you should see everything looking a

15:36.810 --> 15:37.360
bit better.

15:37.830 --> 15:43.530
The classes I just used are bootstrap classes and are not specific to WordPress or Buddy Press in any

15:43.530 --> 15:43.880
way.

15:44.730 --> 15:46.250
Let me go over what happened.

15:46.440 --> 15:50.700
The first thing we did was tell Buddy Press about a new menu item we'd like to add.

15:51.060 --> 15:56.490
If a user clicks on this menu item, then the screen function will be called the screen function does

15:56.490 --> 15:57.300
a few things.

15:57.750 --> 16:00.140
What we want to do is display our content.

16:00.390 --> 16:02.520
There are a couple of ways to go about this.

16:02.790 --> 16:09.010
We could, if we wanted to, just output HTML directly from the function, that's perfectly fine.

16:09.270 --> 16:14.790
However, it's always good practice to make the page matched the site and allow other plugins to extend

16:14.790 --> 16:20.520
the page if they need to buddy press provide a template for plugins to use so that plug ins don't have

16:20.520 --> 16:24.120
to worry about a lot of the markup or calling any required functions.

16:24.570 --> 16:29.400
A special thing about this template is that there are action hooks called at certain points to allow

16:29.400 --> 16:31.040
developers to display content.

16:31.740 --> 16:33.360
That's exactly what we do here.

16:33.540 --> 16:36.210
We use those action hooks specifically.

16:36.330 --> 16:39.630
We hook into the title and content action hooks.

16:39.960 --> 16:43.740
The functions that are called will output a title and the content respectively.

16:44.070 --> 16:47.850
It's a lot of work, but well worth the effort that should do it for now.

16:48.000 --> 16:50.040
Let's continue on to the next lecture.

16:51.580 --> 16:52.130
Oh.
