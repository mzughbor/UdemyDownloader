1
00:00:07,090 --> 00:00:13,330
It's time to update the settings, we'll be taking a look at a special kind of action hook and the resource

2
00:00:13,330 --> 00:00:19,210
section, I provide a link to the admin, underscore post, underscore hook, codex page.

3
00:00:19,630 --> 00:00:23,590
As you can see, this hook is a bit more dynamic than other hooks.

4
00:00:23,920 --> 00:00:26,470
WordPress provides a format for this hook.

5
00:00:26,680 --> 00:00:30,760
It's admin underscore post underscore followed by the action name.

6
00:00:31,240 --> 00:00:33,790
The action name is defined in our form.

7
00:00:33,970 --> 00:00:41,410
In the previous lecture, we created a hidden input field with the name of action and a value of our

8
00:00:41,410 --> 00:00:42,340
save options.

9
00:00:42,880 --> 00:00:45,640
So here's what will happen when we submit this form.

10
00:00:45,940 --> 00:00:53,530
If a request is sent to admin post FTP, the admin underscore post underscore hook will run.

11
00:00:54,010 --> 00:01:01,030
WordPress will check for a post or get variable named action and dependent's value to the admin underscore

12
00:01:01,030 --> 00:01:07,200
post underscore look to determine which function to run inside the admin init function.

13
00:01:07,300 --> 00:01:09,340
I'm going to add the action hook here.

14
00:01:09,790 --> 00:01:12,610
Since we named the hook our save options.

15
00:01:12,640 --> 00:01:14,560
The name of this hook will be admin.

16
00:01:14,560 --> 00:01:15,580
Underscore post.

17
00:01:15,580 --> 00:01:18,880
Underscore our underscore save underscore options.

18
00:01:21,410 --> 00:01:27,320
The function I'm going to run will be called our save options, as you can see, it's the same name

19
00:01:27,320 --> 00:01:28,120
as the action.

20
00:01:28,430 --> 00:01:29,890
You don't have to do this.

21
00:01:30,140 --> 00:01:32,240
You can name this function whatever you want.

22
00:01:32,540 --> 00:01:38,940
I do this because it's much simpler to know which function belongs to which action with the hook ready.

23
00:01:38,990 --> 00:01:43,140
We have to create the file next inside the process folder.

24
00:01:43,190 --> 00:01:46,840
I'm going to create a file called Save Option.

25
00:01:46,850 --> 00:01:50,150
Stop and define the function inside this file.

26
00:01:54,780 --> 00:01:58,230
Now, I'm going to include this file from the main plug and file.

27
00:02:05,530 --> 00:02:12,850
Inside the function, I want you to output the post rate, I'm going to echo out some pretext to format

28
00:02:12,850 --> 00:02:15,310
it and then I'm just going to kill the scripts.

29
00:02:23,220 --> 00:02:29,460
Let's refresh the options page, we should see everything working just fine, go ahead and select some

30
00:02:29,460 --> 00:02:30,090
options.

31
00:02:30,270 --> 00:02:35,730
If we submit this form, you'll see our data being neatly outputted and formatted for us.

32
00:02:36,120 --> 00:02:41,550
Now that we've confirmed our form is being properly submitted, we should check if it's being submitted

33
00:02:41,550 --> 00:02:42,690
by a trusted user.

34
00:02:43,320 --> 00:02:46,950
There are two steps we're going to take to prevent malicious behavior.

35
00:02:47,350 --> 00:02:50,790
First, we're going to check the user's current capabilities.

36
00:02:51,030 --> 00:02:55,290
In an earlier lecture, we talked about capabilities and roles briefly.

37
00:02:55,650 --> 00:03:00,060
We'll be using the same capability we used the last time to display this page.

38
00:03:00,720 --> 00:03:02,310
Let's empty out our function.

39
00:03:02,310 --> 00:03:07,110
And then inside the conditional statement, I want you to call the function current user can.

40
00:03:09,710 --> 00:03:15,440
This function is provided to you by WordPress, what it will do is check the current logged in users

41
00:03:15,440 --> 00:03:20,300
capabilities and see if that user can perform a certain capability passed in by you.

42
00:03:21,140 --> 00:03:27,200
Since we want to use the same capability we use to display the page, I'm going to grab that capability

43
00:03:27,200 --> 00:03:30,140
from the menus function and just paste it in here.

44
00:03:32,700 --> 00:03:38,160
I'm going to check of this function returns false, and if it does, I'm going to kill the script.

45
00:03:38,160 --> 00:03:42,050
Using WP died inside the day function.

46
00:03:42,060 --> 00:03:45,510
I'm going to pass in a simple message and make it translatable.

47
00:03:51,290 --> 00:03:53,330
This is one way to prevent attacks.

48
00:03:53,630 --> 00:03:57,550
Next, we're going to check the nonce WordPress generated for us.

49
00:03:57,860 --> 00:03:59,000
This is pretty simple.

50
00:03:59,270 --> 00:04:02,990
WordPress provides a function called check admin referrer.

51
00:04:05,430 --> 00:04:12,120
This function must be passed in the nonce we created inside the form we called this Norns our options

52
00:04:12,120 --> 00:04:12,700
verified.

53
00:04:13,140 --> 00:04:15,510
So let's pass that into the function.

54
00:04:15,810 --> 00:04:22,079
This function will check not only the nonce, but the page that was referred were not going to put this

55
00:04:22,079 --> 00:04:27,120
function inside a conditional statement because this function will simply kill the script if it turns

56
00:04:27,120 --> 00:04:28,090
out to be false.

57
00:04:28,470 --> 00:04:31,470
We can now start processing the form data and save it.

58
00:04:32,300 --> 00:04:37,020
We're going to grab the R opts option so that we can override its options.

59
00:04:37,350 --> 00:04:39,990
The variable should be called recipe opts.

60
00:04:43,360 --> 00:04:49,390
All I'm going to do is update the options with the post values, I'm going to be using a function called

61
00:04:49,390 --> 00:04:52,390
ABB's into this function, does two things.

62
00:04:52,600 --> 00:04:56,590
It returns a value that is an integer and is an absolute value.

63
00:04:57,040 --> 00:05:02,220
This function is also provided to you by WordPress, and I highly recommend it that you use it.

64
00:05:02,560 --> 00:05:07,860
However, you should know that the options API will sanitize all values for you anyway.

65
00:05:16,550 --> 00:05:20,030
Next, we're going to use a function called update option.

66
00:05:22,320 --> 00:05:28,770
This function has two parameters, which is the name of the option to update and the updated value after

67
00:05:28,770 --> 00:05:30,010
updating the option.

68
00:05:30,030 --> 00:05:33,210
It's time to redirect the user back to the settings page.

69
00:05:33,600 --> 00:05:38,610
WordPress provides a handy function called WP Redirect for this purpose.

70
00:05:38,880 --> 00:05:43,040
The function accepts one parameter, which is the Eurorail to redirect to.

71
00:05:43,380 --> 00:05:48,360
I'm going to use the admin neural function so that we always get the admin URL.

72
00:05:48,360 --> 00:05:51,320
Even if the user changed in the WordPress installation.

73
00:05:51,840 --> 00:05:57,060
This function has one parameter as well, which is the path relative to the admin Yooralla.

74
00:05:57,690 --> 00:06:02,640
I'm going to copy and paste the URL from the URL bar and pasted in here like Selm.

75
00:06:08,030 --> 00:06:15,500
I'm also going to pass in an extra get variable called Stenness and set its value to one by doing this

76
00:06:15,620 --> 00:06:21,350
I can shake up this value is set and if it is, I can display a message about the status of the update.

77
00:06:21,680 --> 00:06:23,140
I'll show you what I mean soon.

78
00:06:23,810 --> 00:06:25,460
Let's try submitting the form.

79
00:06:25,460 --> 00:06:30,830
And if everything worked out, we should see no errors and be redirected back to the options page.

80
00:06:31,100 --> 00:06:31,700
Perfect.

81
00:06:31,910 --> 00:06:33,890
Now we face two more problems.

82
00:06:34,100 --> 00:06:39,830
Our fields aren't showing the updated values and there's no message to let the user know that the update

83
00:06:39,830 --> 00:06:40,820
was a success.

84
00:06:41,450 --> 00:06:46,590
You might have already guessed what you would have to do in order to display our options and its values.

85
00:06:46,970 --> 00:06:52,430
I want you to pause the video and try to figure out a way for the input fields to have the current values

86
00:06:52,430 --> 00:06:52,820
input.

87
00:06:52,820 --> 00:06:58,360
If you already have the knowledge to figure this out, go ahead and try to solve this issue.

88
00:07:00,270 --> 00:07:01,110
Welcome back.

89
00:07:01,230 --> 00:07:04,030
If you figured it out, then that's great if you didn't.

90
00:07:04,080 --> 00:07:05,110
That's fine as well.

91
00:07:05,340 --> 00:07:10,420
We'll go over how to do it together first inside the options page function.

92
00:07:10,470 --> 00:07:16,380
We're going to grab the option using the get option function and store the return value in the recipe

93
00:07:16,380 --> 00:07:17,370
opts variable.

94
00:07:20,250 --> 00:07:26,020
Now, all we have to do is reflect the values onto the input fields for these select menu.

95
00:07:26,040 --> 00:07:28,350
We're going to use a ternary operator.

96
00:07:33,510 --> 00:07:39,420
This is special to me and not WordPress, we're going to check if the values are equal to two.

97
00:07:39,750 --> 00:07:43,950
If it is, then will echo out selected for the second option.

98
00:07:50,060 --> 00:07:55,090
We won't do this for the first option since browser's will set the default value to the first option,

99
00:07:55,640 --> 00:07:58,420
let's refresh the page and see if everything works.

100
00:07:58,430 --> 00:08:00,060
Everything seems perfect.

101
00:08:00,650 --> 00:08:04,970
The last thing we need to do is display the message after a successful submission.

102
00:08:06,940 --> 00:08:13,270
Right above the form tags, insert some tags, we're going to use a conditional statement and check

103
00:08:13,270 --> 00:08:19,210
if the status quo is set in the get variable and we're going to check if its value is equal to one.

104
00:08:19,720 --> 00:08:24,580
If this conditional statement is true, then we're going to display a success message.

105
00:08:33,309 --> 00:08:39,549
Refresh the page and we should now see the success message, this was very simple to do in the next

106
00:08:39,549 --> 00:08:43,460
lecture, we're going to recreate this using these settings API.

107
00:08:43,900 --> 00:08:47,020
I know that seems strange, but just go with me on this one.

108
00:08:47,290 --> 00:08:49,090
I'll see you in the next lecture.

