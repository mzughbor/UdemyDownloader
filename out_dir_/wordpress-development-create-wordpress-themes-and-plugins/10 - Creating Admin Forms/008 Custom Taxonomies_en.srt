1
00:00:07,320 --> 00:00:13,350
I'm now logged back in as the admin user, if you haven't already do the same in this lecture, we're

2
00:00:13,350 --> 00:00:15,300
going to talk about taxonomies.

3
00:00:15,480 --> 00:00:20,910
Taxonomies is a very simple concept to understand, but under the hood, it's very complex.

4
00:00:21,480 --> 00:00:28,200
A taxonomy is just a word or phrase that is associated with the post WordPress provides to built-In

5
00:00:28,200 --> 00:00:30,960
taxonomies called tags and categories.

6
00:00:31,200 --> 00:00:35,840
If you think about it, those two taxonomies make it easier to group post together.

7
00:00:36,270 --> 00:00:41,670
For example, if you owned a music site and you wanted to assign post to the genre rock, then you would

8
00:00:41,670 --> 00:00:42,540
use the category.

9
00:00:43,050 --> 00:00:47,040
By doing this, you could filter posts associated with certain genres.

10
00:00:47,250 --> 00:00:52,290
In the resource section of this lecture, I provide a link to learn more about taxonomies.

11
00:00:52,740 --> 00:00:56,090
Taxonomies can make it easier to manage and filter posts.

12
00:00:56,400 --> 00:01:02,580
The concept behind taxonomies is very simple, but WordPress does a lot of work behind the scenes.

13
00:01:02,880 --> 00:01:07,770
To better understand how much WordPress is doing, let's take a look at a database diagram.

14
00:01:08,490 --> 00:01:12,420
WordPress creates three tables just for managing taxonomies.

15
00:01:12,660 --> 00:01:14,280
Let's break down each table.

16
00:01:14,910 --> 00:01:19,140
WP underscore terms stores all of your taxonomy terms.

17
00:01:19,500 --> 00:01:25,650
WP underscore term underscore taxonomy defines what taxonomy each term belongs to.

18
00:01:26,250 --> 00:01:29,340
WP underscore term underscore relationships.

19
00:01:29,460 --> 00:01:33,560
A cross reference table that joins taxonomy terms with your content.

20
00:01:34,380 --> 00:01:38,310
Each of these tables play a significant role when it comes to taxonomies.

21
00:01:38,670 --> 00:01:43,980
To show you how complex things can get, here is what a sequel query might look like when you want to

22
00:01:43,980 --> 00:01:46,470
grab all the posts and their taxonomies.

23
00:01:46,710 --> 00:01:51,300
As you can see, you have to make a lot of Joynes just to grab something so simple.

24
00:01:51,930 --> 00:01:57,120
Luckily, you don't have to deal with this kind of stuff as WordPress has a lot of built in functions

25
00:01:57,120 --> 00:01:59,100
that will handle all this workload for you.

26
00:01:59,490 --> 00:02:02,280
An example would be the WP query class.

27
00:02:02,640 --> 00:02:06,720
This class has quite a few options for grabbing posts with taxonomies.

28
00:02:07,020 --> 00:02:12,930
If you can recall, we grabbed posts related to a single post based on a category and displayed them

29
00:02:12,930 --> 00:02:14,060
right below the content.

30
00:02:14,520 --> 00:02:17,250
This is an example of us using a taxonomy.

31
00:02:17,820 --> 00:02:20,580
It's even easy to create our own taxonomy.

32
00:02:20,790 --> 00:02:23,310
Let's do that now for our recipes.

33
00:02:23,310 --> 00:02:26,940
I want to create a taxonomy for the origin of a recipe.

34
00:02:27,300 --> 00:02:32,040
Many recipes can come from Italy or France or any other country you can think of.

35
00:02:32,370 --> 00:02:38,280
So it would be a good idea to use a taxonomy to group recipes together based on their origin.

36
00:02:39,030 --> 00:02:43,470
To register a taxonomy, you have to use the function register taxonomy.

37
00:02:43,890 --> 00:02:48,480
This function must be called inside the init hook, but we already have something like that.

38
00:02:48,900 --> 00:02:54,540
So let's open the init file now, right after creating the post time.

39
00:02:54,570 --> 00:02:55,860
Let's call this function.

40
00:02:58,130 --> 00:03:04,070
This function has three parameters, the first parameter is the name of this taxonomy in the resource

41
00:03:04,070 --> 00:03:07,070
section of this lecture, I provided a link to this function.

42
00:03:07,460 --> 00:03:12,650
If you scroll down to the list of parameters, you'll find that WordPress provides some information

43
00:03:12,650 --> 00:03:13,700
about this parameter.

44
00:03:14,360 --> 00:03:20,330
The name of the taxonomy name should only contain lowercase letters and the underscore character and

45
00:03:20,330 --> 00:03:22,620
not be more than thirty two characters long.

46
00:03:23,210 --> 00:03:26,180
Let's keep it simple and name this taxonomy origin.

47
00:03:28,510 --> 00:03:33,100
The second parameter is what post type will this taxonomy be associated with?

48
00:03:33,340 --> 00:03:38,710
I want this taxonomy to only belong to the recipe post type, so pass that in like.

49
00:03:38,710 --> 00:03:42,420
So the last parameter is an array of arguments we can set.

50
00:03:43,210 --> 00:03:47,380
If you look at the documentation, you'll notice we can set a number of things.

51
00:03:47,560 --> 00:03:49,010
Let's pass in an array.

52
00:03:49,360 --> 00:03:51,640
There are only three things I'm going to set.

53
00:03:51,910 --> 00:03:54,520
A lot of the default settings are fine the way they are.

54
00:03:55,180 --> 00:03:57,910
I want to set the label to origin.

55
00:03:58,160 --> 00:03:59,980
I'll make this string translatable.

56
00:04:02,180 --> 00:04:04,800
The next thing I want to set is the rewrite rule.

57
00:04:04,970 --> 00:04:07,340
I want the slug to be origin.

58
00:04:12,780 --> 00:04:17,279
The last thing I want to set is the show in reste option, this should be true.

59
00:04:19,589 --> 00:04:25,650
This is important to set if you're using Gutenberg, the Gutenberg editor uses an API called the rest

60
00:04:25,650 --> 00:04:26,310
API.

61
00:04:26,670 --> 00:04:27,720
This is an API.

62
00:04:27,720 --> 00:04:29,910
We haven't been able to go over in depth.

63
00:04:30,130 --> 00:04:33,980
It basically allows WordPress to update the database through requests.

64
00:04:34,350 --> 00:04:37,090
We'll explore the rest API in a later lecture.

65
00:04:37,410 --> 00:04:42,460
Just know for now that it's necessary for custom taxonomies to work in the Gutenberg editor.

66
00:04:43,080 --> 00:04:49,710
These are the only things I want to set Savir changes and navigate to the admin dashboard right under

67
00:04:49,710 --> 00:04:50,970
the recipes menu.

68
00:04:51,030 --> 00:04:53,390
You'll find a new submenu called Origin.

69
00:04:53,940 --> 00:04:59,480
Click on this and you'll find that WordPress generates a UI for you to manage these taxonomies.

70
00:04:59,670 --> 00:05:05,400
If you were to create a new recipe or an existing one, you'll find a panel on the sidebar that lets

71
00:05:05,400 --> 00:05:08,940
you manage the origin taxonomy for this particular post.

72
00:05:09,210 --> 00:05:14,910
As you can see, WordPress does a lot under the hood for you already when it comes to taxonomies.

